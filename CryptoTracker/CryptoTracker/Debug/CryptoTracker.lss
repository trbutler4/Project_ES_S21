
CryptoTracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000012ea  0000137e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800132  00800132  000013b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000125c  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c9  00000000  00000000  00002fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3c  00000000  00000000  00003d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000047c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d8 e0       	ldi	r29, 0x08	; 8
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea ee       	ldi	r30, 0xEA	; 234
      b8:	f2 e1       	ldi	r31, 0x12	; 18
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a2 33       	cpi	r26, 0x32	; 50
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a2 e3       	ldi	r26, 0x32	; 50
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 33       	cpi	r26, 0x38	; 56
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 41 02 	call	0x482	; 0x482 <main>
      da:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <__vector_1>:
/////////////////////////////////////////////////
// function: ISR()
// purpose: toggles the current crypto via interrupt
/////////////////////////////////////////////////
ISR(INT0_vect)
{
      e2:	1f 92       	push	r1
      e4:	0f 92       	push	r0
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	0f 92       	push	r0
      ea:	11 24       	eor	r1, r1
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
	switch(currentCrypto){
      f0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <currentCrypto>
      f4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <currentCrypto+0x1>
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	19 f0       	breq	.+6      	; 0x102 <__vector_1+0x20>
      fc:	01 97       	sbiw	r24, 0x01	; 1
      fe:	41 f0       	breq	.+16     	; 0x110 <__vector_1+0x2e>
     100:	0b c0       	rjmp	.+22     	; 0x118 <__vector_1+0x36>
		case 0:
			currentCrypto = 1;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <currentCrypto+0x1>
     10a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <currentCrypto>
			break;
     10e:	04 c0       	rjmp	.+8      	; 0x118 <__vector_1+0x36>
		case 1:
			currentCrypto = 0;
     110:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <currentCrypto+0x1>
     114:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <currentCrypto>
			break;
	}
	resetPrice = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     124:	9f 91       	pop	r25
     126:	8f 91       	pop	r24
     128:	0f 90       	pop	r0
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	0f 90       	pop	r0
     12e:	1f 90       	pop	r1
     130:	18 95       	reti

00000132 <alarm>:
// purpose: sounds the alarm that the price dropped 
//			> 10 percent
/////////////////////////////////////////////////
void alarm()
{
	int i = 0;
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
	for(i; i < 10; i+=1){
     136:	1a c0       	rjmp	.+52     	; 0x16c <alarm+0x3a>
		alarm_port |= (1<<alarm_bit);// turn alarm on
     138:	85 b1       	in	r24, 0x05	; 5
     13a:	81 60       	ori	r24, 0x01	; 1
     13c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13e:	4f ef       	ldi	r20, 0xFF	; 255
     140:	82 e5       	ldi	r24, 0x52	; 82
     142:	97 e0       	ldi	r25, 0x07	; 7
     144:	41 50       	subi	r20, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <alarm+0x12>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <alarm+0x1c>
     14e:	00 00       	nop
		_delay_ms(150);
		alarm_port &= ~(1<<alarm_bit);// turn alarm off
     150:	85 b1       	in	r24, 0x05	; 5
     152:	8e 7f       	andi	r24, 0xFE	; 254
     154:	85 b9       	out	0x05, r24	; 5
     156:	4f ef       	ldi	r20, 0xFF	; 255
     158:	82 e5       	ldi	r24, 0x52	; 82
     15a:	97 e0       	ldi	r25, 0x07	; 7
     15c:	41 50       	subi	r20, 0x01	; 1
     15e:	80 40       	sbci	r24, 0x00	; 0
     160:	90 40       	sbci	r25, 0x00	; 0
     162:	e1 f7       	brne	.-8      	; 0x15c <alarm+0x2a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <alarm+0x34>
     166:	00 00       	nop
//			> 10 percent
/////////////////////////////////////////////////
void alarm()
{
	int i = 0;
	for(i; i < 10; i+=1){
     168:	2f 5f       	subi	r18, 0xFF	; 255
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	2a 30       	cpi	r18, 0x0A	; 10
     16e:	31 05       	cpc	r19, r1
     170:	1c f3       	brlt	.-58     	; 0x138 <alarm+0x6>
		alarm_port |= (1<<alarm_bit);// turn alarm on
		_delay_ms(150);
		alarm_port &= ~(1<<alarm_bit);// turn alarm off
		_delay_ms(150);
	}
}
     172:	08 95       	ret

00000174 <usart_init>:
// - set frame format 8 data, 2 stop bit
/////////////////////////////////////////////////
void usart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
     174:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
     178:	87 e6       	ldi	r24, 0x67	; 103
     17a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     17e:	e2 ec       	ldi	r30, 0xC2	; 194
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	86 60       	ori	r24, 0x06	; 6
     186:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     188:	e1 ec       	ldi	r30, 0xC1	; 193
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 61       	ori	r24, 0x18	; 24
     190:	80 83       	st	Z, r24
     192:	08 95       	ret

00000194 <usart_rx>:
// purpose: receives data from bluetooth module
/////////////////////////////////////////////////
uint16_t usart_rx(void)
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
     194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     198:	88 23       	and	r24, r24
     19a:	e4 f7       	brge	.-8      	; 0x194 <usart_rx>
	// Return received data
	return UDR0;
     19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret

000001a4 <get_string>:

/////////////////////////////////////////////////
// function: get_string
// purpose: gets string from bluetooth module
/////////////////////////////////////////////////
const char* get_string(char input_str[]){
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	2a 97       	sbiw	r28, 0x0a	; 10
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	6c 01       	movw	r12, r24
	char buffer[10];
	uint16_t input = usart_rx();
     1c6:	0e 94 ca 00 	call	0x194	; 0x194 <usart_rx>
	
	int i = 0;
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	10 e0       	ldi	r17, 0x00	; 0
	while (input != '\n'){
     1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <get_string+0x52>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1d0:	4a e0       	ldi	r20, 0x0A	; 10
     1d2:	be 01       	movw	r22, r28
     1d4:	6f 5f       	subi	r22, 0xFF	; 255
     1d6:	7f 4f       	sbci	r23, 0xFF	; 255
     1d8:	0e 94 c0 03 	call	0x780	; 0x780 <__itoa_ncheck>
		itoa(input, buffer, 10);
		input_str[i] = atoi(buffer);
     1dc:	76 01       	movw	r14, r12
     1de:	e0 0e       	add	r14, r16
     1e0:	f1 1e       	adc	r15, r17
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 76 03 	call	0x6ec	; 0x6ec <atoi>
     1ea:	f7 01       	movw	r30, r14
     1ec:	80 83       	st	Z, r24
		i = i + 1;
     1ee:	0f 5f       	subi	r16, 0xFF	; 255
     1f0:	1f 4f       	sbci	r17, 0xFF	; 255
		input = usart_rx();
     1f2:	0e 94 ca 00 	call	0x194	; 0x194 <usart_rx>
const char* get_string(char input_str[]){
	char buffer[10];
	uint16_t input = usart_rx();
	
	int i = 0;
	while (input != '\n'){
     1f6:	8a 30       	cpi	r24, 0x0A	; 10
     1f8:	91 05       	cpc	r25, r1
     1fa:	51 f7       	brne	.-44     	; 0x1d0 <get_string+0x2c>
		i = i + 1;
		input = usart_rx();
	}
	
	return input_str;
}
     1fc:	c6 01       	movw	r24, r12
     1fe:	2a 96       	adiw	r28, 0x0a	; 10
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	08 95       	ret

0000021c <store_prices>:

//////////////////////////
// function: store_prices
// purpose: gets price string and converts string to array of prices
char* store_prices(const char str[], char price_array[10][10]){
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	00 d0       	rcall	.+0      	; 0x22a <store_prices+0xe>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	7b 01       	movw	r14, r22
	const char s[2] = ",";
     230:	2c e2       	ldi	r18, 0x2C	; 44
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	3a 83       	std	Y+2, r19	; 0x02
     236:	29 83       	std	Y+1, r18	; 0x01
	char *token;
	int i = 0;
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
     238:	be 01       	movw	r22, r28
     23a:	6f 5f       	subi	r22, 0xFF	; 255
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	0e 94 94 03 	call	0x728	; 0x728 <strtok>
// function: store_prices
// purpose: gets price string and converts string to array of prices
char* store_prices(const char str[], char price_array[10][10]){
	const char s[2] = ",";
	char *token;
	int i = 0;
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
	
	/* walk through other tokens */
	while( token != NULL ) {
     246:	28 c0       	rjmp	.+80     	; 0x298 <store_prices+0x7c>
		sprintf(price_array[i], " %s", token );
     248:	a8 01       	movw	r20, r16
     24a:	44 0f       	add	r20, r20
     24c:	55 1f       	adc	r21, r21
     24e:	98 01       	movw	r18, r16
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	22 0f       	add	r18, r18
     256:	33 1f       	adc	r19, r19
     258:	22 0f       	add	r18, r18
     25a:	33 1f       	adc	r19, r19
     25c:	24 0f       	add	r18, r20
     25e:	35 1f       	adc	r19, r21
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	86 e1       	ldi	r24, 0x16	; 22
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	9f 93       	push	r25
     26a:	8f 93       	push	r24
     26c:	c7 01       	movw	r24, r14
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	9f 93       	push	r25
     274:	8f 93       	push	r24
     276:	0e 94 ed 03 	call	0x7da	; 0x7da <sprintf>
		
		i = i + 1;
     27a:	0f 5f       	subi	r16, 0xFF	; 255
     27c:	1f 4f       	sbci	r17, 0xFF	; 255
		token = strtok(NULL, s);
     27e:	be 01       	movw	r22, r28
     280:	6f 5f       	subi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 94 03 	call	0x728	; 0x728 <strtok>
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
	char buffer[10];
	/* get the first token */
	token = strtok(str, s);
	
	/* walk through other tokens */
	while( token != NULL ) {
     298:	00 97       	sbiw	r24, 0x00	; 0
     29a:	b1 f6       	brne	.-84     	; 0x248 <store_prices+0x2c>
		i = i + 1;
		token = strtok(NULL, s);
	}
	
	return price_array;
}
     29c:	c7 01       	movw	r24, r14
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	08 95       	ret

000002b0 <lcd_write>:
// function: lcd_write
// purpose: send a byte nibble by nibble to the LCD
/////////////////////////////////////////////////
void lcd_write(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     2b0:	98 b1       	in	r25, 0x08	; 8
     2b2:	97 7f       	andi	r25, 0xF7	; 247
     2b4:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     2b6:	88 23       	and	r24, r24
     2b8:	1c f4       	brge	.+6      	; 0x2c0 <lcd_write+0x10>
     2ba:	98 b1       	in	r25, 0x08	; 8
     2bc:	98 60       	ori	r25, 0x08	; 8
     2be:	98 b9       	out	0x08, r25	; 8

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     2c0:	98 b1       	in	r25, 0x08	; 8
     2c2:	9b 7f       	andi	r25, 0xFB	; 251
     2c4:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     2c6:	86 ff       	sbrs	r24, 6
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <lcd_write+0x20>
     2ca:	98 b1       	in	r25, 0x08	; 8
     2cc:	94 60       	ori	r25, 0x04	; 4
     2ce:	98 b9       	out	0x08, r25	; 8

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     2d0:	98 b1       	in	r25, 0x08	; 8
     2d2:	9d 7f       	andi	r25, 0xFD	; 253
     2d4:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     2d6:	85 ff       	sbrs	r24, 5
     2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <lcd_write+0x30>
     2da:	98 b1       	in	r25, 0x08	; 8
     2dc:	92 60       	ori	r25, 0x02	; 2
     2de:	98 b9       	out	0x08, r25	; 8

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     2e0:	98 b1       	in	r25, 0x08	; 8
     2e2:	9e 7f       	andi	r25, 0xFE	; 254
     2e4:	98 b9       	out	0x08, r25	; 8
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     2e6:	84 ff       	sbrs	r24, 4
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <lcd_write+0x40>
     2ea:	88 b1       	in	r24, 0x08	; 8
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	88 b9       	out	0x08, r24	; 8

    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     2f0:	85 b1       	in	r24, 0x05	; 5
     2f2:	88 60       	ori	r24, 0x08	; 8
     2f4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	8a 95       	dec	r24
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_write+0x48>
     2fc:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     2fe:	85 b1       	in	r24, 0x05	; 5
     300:	87 7f       	andi	r24, 0xF7	; 247
     302:	85 b9       	out	0x05, r24	; 5
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_write+0x56>
     30a:	00 00       	nop
     30c:	08 95       	ret

0000030e <lcd_write_char>:
// function: lcd_write_char
// purpose: send a byte nibble by nibble as
// a character
/////////////////////////////////////////////////
void lcd_write_char(uint8_t theData)
{
     30e:	cf 93       	push	r28
     310:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     312:	85 b1       	in	r24, 0x05	; 5
     314:	80 62       	ori	r24, 0x20	; 32
     316:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	87 7f       	andi	r24, 0xF7	; 247
     31c:	85 b9       	out	0x05, r24	; 5
    lcd_write(theData);                           // write the upper 4-bits of the data
     31e:	8c 2f       	mov	r24, r28
     320:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
    lcd_write(theData << 4);                      // write the lower 4-bits of the data
     324:	8c 2f       	mov	r24, r28
     326:	82 95       	swap	r24
     328:	80 7f       	andi	r24, 0xF0	; 240
     32a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
}
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <lcd_write_str>:
// function: lcd_write_str
// purpose: sends a string to the LCD to be 
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <lcd_write_str+0xa>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     342:	1a 82       	std	Y+2, r1	; 0x02
     344:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     346:	12 c0       	rjmp	.+36     	; 0x36c <lcd_write_str+0x3a>
    {
        lcd_write_char(theString[i]);
     348:	e9 81       	ldd	r30, Y+1	; 0x01
     34a:	fa 81       	ldd	r31, Y+2	; 0x02
     34c:	e0 0f       	add	r30, r16
     34e:	f1 1f       	adc	r31, r17
     350:	80 81       	ld	r24, Z
     352:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write_char>
        i++;
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	8f e3       	ldi	r24, 0x3F	; 63
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_write_str+0x32>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_write_str+0x38>
     36a:	00 00       	nop
// displayed
/////////////////////////////////////////////////
void lcd_write_str(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     36c:	e9 81       	ldd	r30, Y+1	; 0x01
     36e:	fa 81       	ldd	r31, Y+2	; 0x02
     370:	e0 0f       	add	r30, r16
     372:	f1 1f       	adc	r31, r17
     374:	80 81       	ld	r24, Z
     376:	81 11       	cpse	r24, r1
     378:	e7 cf       	rjmp	.-50     	; 0x348 <lcd_write_str+0x16>
    {
        lcd_write_char(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <lcd_write_instruction>:
// function: lcd_write_instruction
// purpose: send a byte nibble by nibble to
// the LCD as an instruction
/////////////////////////////////////////////////
void lcd_write_instruction(uint8_t theInstruction)
{
     388:	cf 93       	push	r28
     38a:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     38c:	85 b1       	in	r24, 0x05	; 5
     38e:	8f 7d       	andi	r24, 0xDF	; 223
     390:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     392:	85 b1       	in	r24, 0x05	; 5
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	85 b9       	out	0x05, r24	; 5
    lcd_write(theInstruction);                    // write the upper 4-bits of the data
     398:	8c 2f       	mov	r24, r28
     39a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
    lcd_write(theInstruction << 4);               // write the lower 4-bits of the data
     39e:	8c 2f       	mov	r24, r28
     3a0:	82 95       	swap	r24
     3a2:	80 7f       	andi	r24, 0xF0	; 240
     3a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
}
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <move_to_line_2>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
void move_to_line_2(void){
  lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
     3ac:	80 ec       	ldi	r24, 0xC0	; 192
     3ae:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     3b2:	8f e3       	ldi	r24, 0x3F	; 63
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <move_to_line_2+0xa>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <move_to_line_2+0x10>
     3bc:	00 00       	nop
     3be:	08 95       	ret

000003c0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	81 ee       	ldi	r24, 0xE1	; 225
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <lcd_init+0x6>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <lcd_init+0x10>
     3d0:	00 00       	nop
  // delay for a bit so hardware can do it's thing
    _delay_ms(100);    
                               
    // note we start in 8 bit mode, so we gotta change that
    // Set up the RS and E lines for the 'lcd_write' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);
     3d2:	85 b1       	in	r24, 0x05	; 5
     3d4:	8f 7d       	andi	r24, 0xDF	; 223
     3d6:	85 b9       	out	0x05, r24	; 5
    lcd_E_port &= ~(1<<lcd_E_bit);                  
     3d8:	85 b1       	in	r24, 0x05	; 5
     3da:	87 7f       	andi	r24, 0xF7	; 247
     3dc:	85 b9       	out	0x05, r24	; 5

    // Setup the LCD
    lcd_write(lcd_reset); // first part of reset sequence
     3de:	80 e3       	ldi	r24, 0x30	; 48
     3e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
     3e4:	8f e3       	ldi	r24, 0x3F	; 63
     3e6:	9c e9       	ldi	r25, 0x9C	; 156
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_init+0x28>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <lcd_init+0x2e>
     3ee:	00 00       	nop
    _delay_ms(10);

    lcd_write(lcd_reset); // second part of reset sequence
     3f0:	80 e3       	ldi	r24, 0x30	; 48
     3f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f6:	8f e1       	ldi	r24, 0x1F	; 31
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_init+0x3a>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
    _delay_us(200);

    lcd_write(lcd_reset); // third part of reset sequence
     402:	80 e3       	ldi	r24, 0x30	; 48
     404:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
     408:	8f e1       	ldi	r24, 0x1F	; 31
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop
    _delay_us(200); 
 
    lcd_write(lcd_setTo4Bit); // set 4-bit mode
     414:	88 e2       	ldi	r24, 0x28	; 40
     416:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
     41a:	8f e3       	ldi	r24, 0x3F	; 63
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     424:	00 00       	nop
    _delay_us(80);

    // Function Set instruction
    lcd_write_instruction(lcd_setTo4Bit); 
     426:	88 e2       	ldi	r24, 0x28	; 40
     428:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     42c:	8f e3       	ldi	r24, 0x3F	; 63
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     436:	00 00       	nop
    _delay_us(80);  

    // Display On
    lcd_write_instruction(lcd_DisplayOff);        
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     43e:	8f e3       	ldi	r24, 0x3F	; 63
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     448:	00 00       	nop
    _delay_us(80); 

    // Clear Display
    lcd_write_instruction(lcd_Clear);            
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     450:	8f e7       	ldi	r24, 0x7F	; 127
     452:	9e e3       	ldi	r25, 0x3E	; 62
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     45a:	00 00       	nop
    _delay_ms(4);                                  

    // Entry Mode Set instruction
    lcd_write_instruction(lcd_EntryMode);  
     45c:	86 e0       	ldi	r24, 0x06	; 6
     45e:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     462:	8f e3       	ldi	r24, 0x3F	; 63
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     46c:	00 00       	nop
    _delay_us(80);                                  
 
    // Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOn);         
     46e:	8c e0       	ldi	r24, 0x0C	; 12
     470:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     474:	8f e3       	ldi	r24, 0x3F	; 63
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47e:	00 00       	nop
     480:	08 95       	ret

00000482 <main>:
/////////////////////////////////////////////////
// Function: move_to_line_2
// Purpose: moves cursor to line 2
/////////////////////////////////////////////////
int main(void)
{	
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	ca 5a       	subi	r28, 0xAA	; 170
     48c:	d1 09       	sbc	r29, r1
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
	// storage variables
	char cryptos[2][10] = { "Bitcoin",		// supported crypto names. Index = current crypto int
     498:	84 e1       	ldi	r24, 0x14	; 20
     49a:	e2 e0       	ldi	r30, 0x02	; 2
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	de 01       	movw	r26, r28
     4a0:	11 96       	adiw	r26, 0x01	; 1
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x20>
	char prices[10][10];
	
	double previousPrice = 0; // previous price of currently viewed crypto. Used for alarm
	
	// configure the data lines for output to LCD
    lcd_D7_ddr |= (1<<lcd_D7_bit);
     4aa:	87 b1       	in	r24, 0x07	; 7
     4ac:	88 60       	ori	r24, 0x08	; 8
     4ae:	87 b9       	out	0x07, r24	; 7
    lcd_D6_ddr |= (1<<lcd_D6_bit);
     4b0:	87 b1       	in	r24, 0x07	; 7
     4b2:	84 60       	ori	r24, 0x04	; 4
     4b4:	87 b9       	out	0x07, r24	; 7
    lcd_D5_ddr |= (1<<lcd_D5_bit);
     4b6:	87 b1       	in	r24, 0x07	; 7
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	87 b9       	out	0x07, r24	; 7
    lcd_D4_ddr |= (1<<lcd_D4_bit);
     4bc:	87 b1       	in	r24, 0x07	; 7
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	87 b9       	out	0x07, r24	; 7
	
	// configure data lines for output to alarm
	alarm_ddr |= (1<<alarm_bit);
     4c2:	84 b1       	in	r24, 0x04	; 4
     4c4:	81 60       	ori	r24, 0x01	; 1
     4c6:	84 b9       	out	0x04, r24	; 4
	

	// configure the data lines for controlling the LCD
    lcd_E_ddr |= (1<<lcd_E_bit);        // Enable
     4c8:	84 b1       	in	r24, 0x04	; 4
     4ca:	88 60       	ori	r24, 0x08	; 8
     4cc:	84 b9       	out	0x04, r24	; 4
    lcd_RS_ddr |= (1<<lcd_RS_bit);    // Register Select
     4ce:	84 b1       	in	r24, 0x04	; 4
     4d0:	80 62       	ori	r24, 0x20	; 32
     4d2:	84 b9       	out	0x04, r24	; 4

	// init lcd and usart
    lcd_init();
     4d4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_init>
	usart_init();
     4d8:	0e 94 ba 00 	call	0x174	; 0x174 <usart_init>

	// Type welcome message
    lcd_write_str("Welcome to");
     4dc:	8a e1       	ldi	r24, 0x1A	; 26
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 99 01 	call	0x332	; 0x332 <lcd_write_str>
    move_to_line_2();
     4e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <move_to_line_2>
    lcd_write_str("CryptoTicker");
     4e8:	85 e2       	ldi	r24, 0x25	; 37
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 99 01 	call	0x332	; 0x332 <lcd_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	33 e2       	ldi	r19, 0x23	; 35
     4f4:	84 ef       	ldi	r24, 0xF4	; 244
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	30 40       	sbci	r19, 0x00	; 0
     4fa:	80 40       	sbci	r24, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <main+0x74>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <main+0x7e>
     500:	00 00       	nop
	
	// display welcome message for 5 seconds
	// and then clear the screen
	_delay_ms(5000);
	lcd_write_instruction(lcd_Clear);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     508:	9f ef       	ldi	r25, 0xFF	; 255
     50a:	27 ee       	ldi	r18, 0xE7	; 231
     50c:	33 e0       	ldi	r19, 0x03	; 3
     50e:	91 50       	subi	r25, 0x01	; 1
     510:	20 40       	sbci	r18, 0x00	; 0
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <main+0x8c>
     516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x96>
     518:	00 00       	nop
	_delay_ms(80);
	
	// set INT0 to trigger on rising edge
	EICRA |= (1 << ISC00) | (1 << ISC01);
     51a:	e9 e6       	ldi	r30, 0x69	; 105
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	83 60       	ori	r24, 0x03	; 3
     522:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
     524:	8d b3       	in	r24, 0x1d	; 29
     526:	81 60       	ori	r24, 0x01	; 1
     528:	8d bb       	out	0x1d, r24	; 29
	sei();
     52a:	78 94       	sei
	// storage variables
	char cryptos[2][10] = { "Bitcoin",		// supported crypto names. Index = current crypto int
							"Ethereum"};
	char prices[10][10];
	
	double previousPrice = 0; // previous price of currently viewed crypto. Used for alarm
     52c:	c1 2c       	mov	r12, r1
     52e:	d1 2c       	mov	r13, r1
     530:	76 01       	movw	r14, r12

    // main program loop
    while(1){
		// wait for prices to update
		char input_str[50];
		get_string(input_str);
     532:	ce 01       	movw	r24, r28
     534:	87 58       	subi	r24, 0x87	; 135
     536:	9f 4f       	sbci	r25, 0xFF	; 255
     538:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <get_string>
		store_prices(input_str,prices);
     53c:	be 01       	movw	r22, r28
     53e:	6b 5e       	subi	r22, 0xEB	; 235
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	ce 01       	movw	r24, r28
     544:	87 58       	subi	r24, 0x87	; 135
     546:	9f 4f       	sbci	r25, 0xFF	; 255
     548:	0e 94 0e 01 	call	0x21c	; 0x21c <store_prices>
		
		// reset the previous price before checking alarm if resetPrice flag is set
		// and then set flag to zero
		if(resetPrice == 1){
     54c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     550:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	e9 f4       	brne	.+58     	; 0x592 <main+0x110>
			previousPrice = atof(prices[currentCrypto]);
     558:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <currentCrypto>
     55c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <currentCrypto+0x1>
     560:	c9 01       	movw	r24, r18
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	82 0f       	add	r24, r18
     574:	93 1f       	adc	r25, r19
     576:	25 e1       	ldi	r18, 0x15	; 21
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	2c 0f       	add	r18, r28
     57c:	3d 1f       	adc	r19, r29
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	0e 94 72 03 	call	0x6e4	; 0x6e4 <atof>
     586:	6b 01       	movw	r12, r22
     588:	7c 01       	movw	r14, r24
			resetPrice = 0;
     58a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     58e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		// check for a need to alarm
		if(previousPrice > atof(prices[currentCrypto])){
     592:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <currentCrypto>
     596:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <currentCrypto+0x1>
     59a:	c9 01       	movw	r24, r18
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	25 e1       	ldi	r18, 0x15	; 21
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	2c 0f       	add	r18, r28
     5b6:	3d 1f       	adc	r19, r29
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <atof>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	14 f4       	brge	.+4      	; 0x5d4 <main+0x152>
			alarm();
     5d0:	0e 94 99 00 	call	0x132	; 0x132 <alarm>
		}
		
		// either way, set previous price to the new price
		previousPrice = atof(prices[currentCrypto]);
     5d4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <currentCrypto>
     5d8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <currentCrypto+0x1>
     5dc:	c9 01       	movw	r24, r18
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	22 0f       	add	r18, r18
     5ec:	33 1f       	adc	r19, r19
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	25 e1       	ldi	r18, 0x15	; 21
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	2c 0f       	add	r18, r28
     5f8:	3d 1f       	adc	r19, r29
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	0e 94 72 03 	call	0x6e4	; 0x6e4 <atof>
     602:	6b 01       	movw	r12, r22
     604:	7c 01       	movw	r14, r24
		
		lcd_write_instruction(lcd_Clear);
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_write_instruction>
     60c:	3f ef       	ldi	r19, 0xFF	; 255
     60e:	87 ee       	ldi	r24, 0xE7	; 231
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	31 50       	subi	r19, 0x01	; 1
     614:	80 40       	sbci	r24, 0x00	; 0
     616:	90 40       	sbci	r25, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <main+0x190>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x19a>
     61c:	00 00       	nop
		_delay_ms(80);
		
		lcd_write_str(cryptos[currentCrypto]);
     61e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <currentCrypto>
     622:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <currentCrypto+0x1>
     626:	c9 01       	movw	r24, r18
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	2c 0f       	add	r18, r28
     642:	3d 1f       	adc	r19, r29
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	0e 94 99 01 	call	0x332	; 0x332 <lcd_write_str>
		move_to_line_2();
     64c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <move_to_line_2>
     650:	3f ef       	ldi	r19, 0xFF	; 255
     652:	87 ee       	ldi	r24, 0xE7	; 231
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	31 50       	subi	r19, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x1d4>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x1de>
     660:	00 00       	nop
		_delay_ms(80);
		lcd_write_str(prices[currentCrypto]);
     662:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <currentCrypto>
     666:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <currentCrypto+0x1>
     66a:	c9 01       	movw	r24, r18
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	25 e1       	ldi	r18, 0x15	; 21
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	2c 0f       	add	r18, r28
     686:	3d 1f       	adc	r19, r29
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	0e 94 99 01 	call	0x332	; 0x332 <lcd_write_str>
    }
     690:	50 cf       	rjmp	.-352    	; 0x532 <main+0xb0>

00000692 <__gesf2>:
     692:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_cmp>
     696:	08 f4       	brcc	.+2      	; 0x69a <__gesf2+0x8>
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	08 95       	ret

0000069c <__fp_cmp>:
     69c:	99 0f       	add	r25, r25
     69e:	00 08       	sbc	r0, r0
     6a0:	55 0f       	add	r21, r21
     6a2:	aa 0b       	sbc	r26, r26
     6a4:	e0 e8       	ldi	r30, 0x80	; 128
     6a6:	fe ef       	ldi	r31, 0xFE	; 254
     6a8:	16 16       	cp	r1, r22
     6aa:	17 06       	cpc	r1, r23
     6ac:	e8 07       	cpc	r30, r24
     6ae:	f9 07       	cpc	r31, r25
     6b0:	c0 f0       	brcs	.+48     	; 0x6e2 <__fp_cmp+0x46>
     6b2:	12 16       	cp	r1, r18
     6b4:	13 06       	cpc	r1, r19
     6b6:	e4 07       	cpc	r30, r20
     6b8:	f5 07       	cpc	r31, r21
     6ba:	98 f0       	brcs	.+38     	; 0x6e2 <__fp_cmp+0x46>
     6bc:	62 1b       	sub	r22, r18
     6be:	73 0b       	sbc	r23, r19
     6c0:	84 0b       	sbc	r24, r20
     6c2:	95 0b       	sbc	r25, r21
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <__fp_cmp+0x38>
     6c6:	0a 26       	eor	r0, r26
     6c8:	61 f0       	breq	.+24     	; 0x6e2 <__fp_cmp+0x46>
     6ca:	23 2b       	or	r18, r19
     6cc:	24 2b       	or	r18, r20
     6ce:	25 2b       	or	r18, r21
     6d0:	21 f4       	brne	.+8      	; 0x6da <__fp_cmp+0x3e>
     6d2:	08 95       	ret
     6d4:	0a 26       	eor	r0, r26
     6d6:	09 f4       	brne	.+2      	; 0x6da <__fp_cmp+0x3e>
     6d8:	a1 40       	sbci	r26, 0x01	; 1
     6da:	a6 95       	lsr	r26
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	81 1d       	adc	r24, r1
     6e0:	81 1d       	adc	r24, r1
     6e2:	08 95       	ret

000006e4 <atof>:
     6e4:	66 27       	eor	r22, r22
     6e6:	77 27       	eor	r23, r23
     6e8:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <strtod>

000006ec <atoi>:
     6ec:	fc 01       	movw	r30, r24
     6ee:	88 27       	eor	r24, r24
     6f0:	99 27       	eor	r25, r25
     6f2:	e8 94       	clt
     6f4:	21 91       	ld	r18, Z+
     6f6:	20 32       	cpi	r18, 0x20	; 32
     6f8:	e9 f3       	breq	.-6      	; 0x6f4 <atoi+0x8>
     6fa:	29 30       	cpi	r18, 0x09	; 9
     6fc:	10 f0       	brcs	.+4      	; 0x702 <atoi+0x16>
     6fe:	2e 30       	cpi	r18, 0x0E	; 14
     700:	c8 f3       	brcs	.-14     	; 0x6f4 <atoi+0x8>
     702:	2b 32       	cpi	r18, 0x2B	; 43
     704:	41 f0       	breq	.+16     	; 0x716 <atoi+0x2a>
     706:	2d 32       	cpi	r18, 0x2D	; 45
     708:	39 f4       	brne	.+14     	; 0x718 <atoi+0x2c>
     70a:	68 94       	set
     70c:	04 c0       	rjmp	.+8      	; 0x716 <atoi+0x2a>
     70e:	0e 94 cb 03 	call	0x796	; 0x796 <__mulhi_const_10>
     712:	82 0f       	add	r24, r18
     714:	91 1d       	adc	r25, r1
     716:	21 91       	ld	r18, Z+
     718:	20 53       	subi	r18, 0x30	; 48
     71a:	2a 30       	cpi	r18, 0x0A	; 10
     71c:	c0 f3       	brcs	.-16     	; 0x70e <atoi+0x22>
     71e:	1e f4       	brtc	.+6      	; 0x726 <atoi+0x3a>
     720:	90 95       	com	r25
     722:	81 95       	neg	r24
     724:	9f 4f       	sbci	r25, 0xFF	; 255
     726:	08 95       	ret

00000728 <strtok>:
     728:	42 e3       	ldi	r20, 0x32	; 50
     72a:	51 e0       	ldi	r21, 0x01	; 1
     72c:	0e 94 99 03 	call	0x732	; 0x732 <strtok_r>
     730:	08 95       	ret

00000732 <strtok_r>:
     732:	fa 01       	movw	r30, r20
     734:	a1 91       	ld	r26, Z+
     736:	b0 81       	ld	r27, Z
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	19 f4       	brne	.+6      	; 0x742 <strtok_r+0x10>
     73c:	10 97       	sbiw	r26, 0x00	; 0
     73e:	e1 f0       	breq	.+56     	; 0x778 <strtok_r+0x46>
     740:	cd 01       	movw	r24, r26
     742:	dc 01       	movw	r26, r24
     744:	cd 01       	movw	r24, r26
     746:	0d 90       	ld	r0, X+
     748:	00 20       	and	r0, r0
     74a:	11 f4       	brne	.+4      	; 0x750 <strtok_r+0x1e>
     74c:	c0 01       	movw	r24, r0
     74e:	13 c0       	rjmp	.+38     	; 0x776 <strtok_r+0x44>
     750:	fb 01       	movw	r30, r22
     752:	21 91       	ld	r18, Z+
     754:	22 23       	and	r18, r18
     756:	19 f0       	breq	.+6      	; 0x75e <strtok_r+0x2c>
     758:	20 15       	cp	r18, r0
     75a:	d9 f7       	brne	.-10     	; 0x752 <strtok_r+0x20>
     75c:	f3 cf       	rjmp	.-26     	; 0x744 <strtok_r+0x12>
     75e:	fb 01       	movw	r30, r22
     760:	21 91       	ld	r18, Z+
     762:	20 15       	cp	r18, r0
     764:	19 f4       	brne	.+6      	; 0x76c <strtok_r+0x3a>
     766:	1e 92       	st	-X, r1
     768:	11 96       	adiw	r26, 0x01	; 1
     76a:	06 c0       	rjmp	.+12     	; 0x778 <strtok_r+0x46>
     76c:	22 23       	and	r18, r18
     76e:	c1 f7       	brne	.-16     	; 0x760 <strtok_r+0x2e>
     770:	0d 90       	ld	r0, X+
     772:	00 20       	and	r0, r0
     774:	a1 f7       	brne	.-24     	; 0x75e <strtok_r+0x2c>
     776:	d0 01       	movw	r26, r0
     778:	fa 01       	movw	r30, r20
     77a:	a1 93       	st	Z+, r26
     77c:	b0 83       	st	Z, r27
     77e:	08 95       	ret

00000780 <__itoa_ncheck>:
     780:	bb 27       	eor	r27, r27
     782:	4a 30       	cpi	r20, 0x0A	; 10
     784:	31 f4       	brne	.+12     	; 0x792 <__itoa_ncheck+0x12>
     786:	99 23       	and	r25, r25
     788:	22 f4       	brpl	.+8      	; 0x792 <__itoa_ncheck+0x12>
     78a:	bd e2       	ldi	r27, 0x2D	; 45
     78c:	90 95       	com	r25
     78e:	81 95       	neg	r24
     790:	9f 4f       	sbci	r25, 0xFF	; 255
     792:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__utoa_common>

00000796 <__mulhi_const_10>:
     796:	7a e0       	ldi	r23, 0x0A	; 10
     798:	97 9f       	mul	r25, r23
     79a:	90 2d       	mov	r25, r0
     79c:	87 9f       	mul	r24, r23
     79e:	80 2d       	mov	r24, r0
     7a0:	91 0d       	add	r25, r1
     7a2:	11 24       	eor	r1, r1
     7a4:	08 95       	ret

000007a6 <__utoa_ncheck>:
     7a6:	bb 27       	eor	r27, r27

000007a8 <__utoa_common>:
     7a8:	fb 01       	movw	r30, r22
     7aa:	55 27       	eor	r21, r21
     7ac:	aa 27       	eor	r26, r26
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	a4 17       	cp	r26, r20
     7b6:	10 f0       	brcs	.+4      	; 0x7bc <__utoa_common+0x14>
     7b8:	a4 1b       	sub	r26, r20
     7ba:	83 95       	inc	r24
     7bc:	50 51       	subi	r21, 0x10	; 16
     7be:	b9 f7       	brne	.-18     	; 0x7ae <__utoa_common+0x6>
     7c0:	a0 5d       	subi	r26, 0xD0	; 208
     7c2:	aa 33       	cpi	r26, 0x3A	; 58
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__utoa_common+0x20>
     7c6:	a9 5d       	subi	r26, 0xD9	; 217
     7c8:	a1 93       	st	Z+, r26
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	79 f7       	brne	.-34     	; 0x7ac <__utoa_common+0x4>
     7ce:	b1 11       	cpse	r27, r1
     7d0:	b1 93       	st	Z+, r27
     7d2:	11 92       	st	Z+, r1
     7d4:	cb 01       	movw	r24, r22
     7d6:	0c 94 75 07 	jmp	0xeea	; 0xeea <strrev>

000007da <sprintf>:
     7da:	ae e0       	ldi	r26, 0x0E	; 14
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__prologue_saves__+0x1c>
     7e6:	0d 89       	ldd	r16, Y+21	; 0x15
     7e8:	1e 89       	ldd	r17, Y+22	; 0x16
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	8c 83       	std	Y+4, r24	; 0x04
     7ee:	1a 83       	std	Y+2, r17	; 0x02
     7f0:	09 83       	std	Y+1, r16	; 0x01
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	9f e7       	ldi	r25, 0x7F	; 127
     7f6:	9e 83       	std	Y+6, r25	; 0x06
     7f8:	8d 83       	std	Y+5, r24	; 0x05
     7fa:	ae 01       	movw	r20, r28
     7fc:	47 5e       	subi	r20, 0xE7	; 231
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	6f 89       	ldd	r22, Y+23	; 0x17
     802:	78 8d       	ldd	r23, Y+24	; 0x18
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 0f 04 	call	0x81e	; 0x81e <vfprintf>
     80c:	ef 81       	ldd	r30, Y+7	; 0x07
     80e:	f8 85       	ldd	r31, Y+8	; 0x08
     810:	e0 0f       	add	r30, r16
     812:	f1 1f       	adc	r31, r17
     814:	10 82       	st	Z, r1
     816:	2e 96       	adiw	r28, 0x0e	; 14
     818:	e4 e0       	ldi	r30, 0x04	; 4
     81a:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__epilogue_restores__+0x1c>

0000081e <vfprintf>:
     81e:	ab e0       	ldi	r26, 0x0B	; 11
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e5 e1       	ldi	r30, 0x15	; 21
     824:	f4 e0       	ldi	r31, 0x04	; 4
     826:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__prologue_saves__>
     82a:	6c 01       	movw	r12, r24
     82c:	7b 01       	movw	r14, r22
     82e:	8a 01       	movw	r16, r20
     830:	fc 01       	movw	r30, r24
     832:	17 82       	std	Z+7, r1	; 0x07
     834:	16 82       	std	Z+6, r1	; 0x06
     836:	83 81       	ldd	r24, Z+3	; 0x03
     838:	81 ff       	sbrs	r24, 1
     83a:	cc c1       	rjmp	.+920    	; 0xbd4 <__stack+0x2d5>
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	3c 01       	movw	r6, r24
     842:	f6 01       	movw	r30, r12
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	f7 01       	movw	r30, r14
     848:	93 fd       	sbrc	r25, 3
     84a:	85 91       	lpm	r24, Z+
     84c:	93 ff       	sbrs	r25, 3
     84e:	81 91       	ld	r24, Z+
     850:	7f 01       	movw	r14, r30
     852:	88 23       	and	r24, r24
     854:	09 f4       	brne	.+2      	; 0x858 <vfprintf+0x3a>
     856:	ba c1       	rjmp	.+884    	; 0xbcc <__stack+0x2cd>
     858:	85 32       	cpi	r24, 0x25	; 37
     85a:	39 f4       	brne	.+14     	; 0x86a <vfprintf+0x4c>
     85c:	93 fd       	sbrc	r25, 3
     85e:	85 91       	lpm	r24, Z+
     860:	93 ff       	sbrs	r25, 3
     862:	81 91       	ld	r24, Z+
     864:	7f 01       	movw	r14, r30
     866:	85 32       	cpi	r24, 0x25	; 37
     868:	29 f4       	brne	.+10     	; 0x874 <vfprintf+0x56>
     86a:	b6 01       	movw	r22, r12
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     872:	e7 cf       	rjmp	.-50     	; 0x842 <vfprintf+0x24>
     874:	91 2c       	mov	r9, r1
     876:	21 2c       	mov	r2, r1
     878:	31 2c       	mov	r3, r1
     87a:	ff e1       	ldi	r31, 0x1F	; 31
     87c:	f3 15       	cp	r31, r3
     87e:	d8 f0       	brcs	.+54     	; 0x8b6 <vfprintf+0x98>
     880:	8b 32       	cpi	r24, 0x2B	; 43
     882:	79 f0       	breq	.+30     	; 0x8a2 <vfprintf+0x84>
     884:	38 f4       	brcc	.+14     	; 0x894 <vfprintf+0x76>
     886:	80 32       	cpi	r24, 0x20	; 32
     888:	79 f0       	breq	.+30     	; 0x8a8 <vfprintf+0x8a>
     88a:	83 32       	cpi	r24, 0x23	; 35
     88c:	a1 f4       	brne	.+40     	; 0x8b6 <vfprintf+0x98>
     88e:	23 2d       	mov	r18, r3
     890:	20 61       	ori	r18, 0x10	; 16
     892:	1d c0       	rjmp	.+58     	; 0x8ce <vfprintf+0xb0>
     894:	8d 32       	cpi	r24, 0x2D	; 45
     896:	61 f0       	breq	.+24     	; 0x8b0 <vfprintf+0x92>
     898:	80 33       	cpi	r24, 0x30	; 48
     89a:	69 f4       	brne	.+26     	; 0x8b6 <vfprintf+0x98>
     89c:	23 2d       	mov	r18, r3
     89e:	21 60       	ori	r18, 0x01	; 1
     8a0:	16 c0       	rjmp	.+44     	; 0x8ce <vfprintf+0xb0>
     8a2:	83 2d       	mov	r24, r3
     8a4:	82 60       	ori	r24, 0x02	; 2
     8a6:	38 2e       	mov	r3, r24
     8a8:	e3 2d       	mov	r30, r3
     8aa:	e4 60       	ori	r30, 0x04	; 4
     8ac:	3e 2e       	mov	r3, r30
     8ae:	2a c0       	rjmp	.+84     	; 0x904 <__stack+0x5>
     8b0:	f3 2d       	mov	r31, r3
     8b2:	f8 60       	ori	r31, 0x08	; 8
     8b4:	1d c0       	rjmp	.+58     	; 0x8f0 <vfprintf+0xd2>
     8b6:	37 fc       	sbrc	r3, 7
     8b8:	2d c0       	rjmp	.+90     	; 0x914 <__stack+0x15>
     8ba:	20 ed       	ldi	r18, 0xD0	; 208
     8bc:	28 0f       	add	r18, r24
     8be:	2a 30       	cpi	r18, 0x0A	; 10
     8c0:	40 f0       	brcs	.+16     	; 0x8d2 <vfprintf+0xb4>
     8c2:	8e 32       	cpi	r24, 0x2E	; 46
     8c4:	b9 f4       	brne	.+46     	; 0x8f4 <vfprintf+0xd6>
     8c6:	36 fc       	sbrc	r3, 6
     8c8:	81 c1       	rjmp	.+770    	; 0xbcc <__stack+0x2cd>
     8ca:	23 2d       	mov	r18, r3
     8cc:	20 64       	ori	r18, 0x40	; 64
     8ce:	32 2e       	mov	r3, r18
     8d0:	19 c0       	rjmp	.+50     	; 0x904 <__stack+0x5>
     8d2:	36 fe       	sbrs	r3, 6
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0xc4>
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	98 9e       	mul	r9, r24
     8da:	20 0d       	add	r18, r0
     8dc:	11 24       	eor	r1, r1
     8de:	92 2e       	mov	r9, r18
     8e0:	11 c0       	rjmp	.+34     	; 0x904 <__stack+0x5>
     8e2:	ea e0       	ldi	r30, 0x0A	; 10
     8e4:	2e 9e       	mul	r2, r30
     8e6:	20 0d       	add	r18, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	22 2e       	mov	r2, r18
     8ec:	f3 2d       	mov	r31, r3
     8ee:	f0 62       	ori	r31, 0x20	; 32
     8f0:	3f 2e       	mov	r3, r31
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
     8f4:	8c 36       	cpi	r24, 0x6C	; 108
     8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0x1>
     8f8:	83 2d       	mov	r24, r3
     8fa:	80 68       	ori	r24, 0x80	; 128
     8fc:	38 2e       	mov	r3, r24
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
     900:	88 36       	cpi	r24, 0x68	; 104
     902:	41 f4       	brne	.+16     	; 0x914 <__stack+0x15>
     904:	f7 01       	movw	r30, r14
     906:	93 fd       	sbrc	r25, 3
     908:	85 91       	lpm	r24, Z+
     90a:	93 ff       	sbrs	r25, 3
     90c:	81 91       	ld	r24, Z+
     90e:	7f 01       	movw	r14, r30
     910:	81 11       	cpse	r24, r1
     912:	b3 cf       	rjmp	.-154    	; 0x87a <vfprintf+0x5c>
     914:	98 2f       	mov	r25, r24
     916:	9f 7d       	andi	r25, 0xDF	; 223
     918:	95 54       	subi	r25, 0x45	; 69
     91a:	93 30       	cpi	r25, 0x03	; 3
     91c:	28 f4       	brcc	.+10     	; 0x928 <__stack+0x29>
     91e:	0c 5f       	subi	r16, 0xFC	; 252
     920:	1f 4f       	sbci	r17, 0xFF	; 255
     922:	9f e3       	ldi	r25, 0x3F	; 63
     924:	99 83       	std	Y+1, r25	; 0x01
     926:	0d c0       	rjmp	.+26     	; 0x942 <__stack+0x43>
     928:	83 36       	cpi	r24, 0x63	; 99
     92a:	31 f0       	breq	.+12     	; 0x938 <__stack+0x39>
     92c:	83 37       	cpi	r24, 0x73	; 115
     92e:	71 f0       	breq	.+28     	; 0x94c <__stack+0x4d>
     930:	83 35       	cpi	r24, 0x53	; 83
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	59 c0       	rjmp	.+178    	; 0x9e8 <__stack+0xe9>
     936:	21 c0       	rjmp	.+66     	; 0x97a <__stack+0x7b>
     938:	f8 01       	movw	r30, r16
     93a:	80 81       	ld	r24, Z
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	0e 5f       	subi	r16, 0xFE	; 254
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	88 24       	eor	r8, r8
     944:	83 94       	inc	r8
     946:	91 2c       	mov	r9, r1
     948:	53 01       	movw	r10, r6
     94a:	13 c0       	rjmp	.+38     	; 0x972 <__stack+0x73>
     94c:	28 01       	movw	r4, r16
     94e:	f2 e0       	ldi	r31, 0x02	; 2
     950:	4f 0e       	add	r4, r31
     952:	51 1c       	adc	r5, r1
     954:	f8 01       	movw	r30, r16
     956:	a0 80       	ld	r10, Z
     958:	b1 80       	ldd	r11, Z+1	; 0x01
     95a:	36 fe       	sbrs	r3, 6
     95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x65>
     95e:	69 2d       	mov	r22, r9
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
     964:	6f ef       	ldi	r22, 0xFF	; 255
     966:	7f ef       	ldi	r23, 0xFF	; 255
     968:	c5 01       	movw	r24, r10
     96a:	0e 94 6a 07 	call	0xed4	; 0xed4 <strnlen>
     96e:	4c 01       	movw	r8, r24
     970:	82 01       	movw	r16, r4
     972:	f3 2d       	mov	r31, r3
     974:	ff 77       	andi	r31, 0x7F	; 127
     976:	3f 2e       	mov	r3, r31
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <__stack+0xa7>
     97a:	28 01       	movw	r4, r16
     97c:	22 e0       	ldi	r18, 0x02	; 2
     97e:	42 0e       	add	r4, r18
     980:	51 1c       	adc	r5, r1
     982:	f8 01       	movw	r30, r16
     984:	a0 80       	ld	r10, Z
     986:	b1 80       	ldd	r11, Z+1	; 0x01
     988:	36 fe       	sbrs	r3, 6
     98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
     98c:	69 2d       	mov	r22, r9
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
     992:	6f ef       	ldi	r22, 0xFF	; 255
     994:	7f ef       	ldi	r23, 0xFF	; 255
     996:	c5 01       	movw	r24, r10
     998:	0e 94 5f 07 	call	0xebe	; 0xebe <strnlen_P>
     99c:	4c 01       	movw	r8, r24
     99e:	f3 2d       	mov	r31, r3
     9a0:	f0 68       	ori	r31, 0x80	; 128
     9a2:	3f 2e       	mov	r3, r31
     9a4:	82 01       	movw	r16, r4
     9a6:	33 fc       	sbrc	r3, 3
     9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <__stack+0xe1>
     9aa:	82 2d       	mov	r24, r2
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	88 16       	cp	r8, r24
     9b0:	99 06       	cpc	r9, r25
     9b2:	b0 f4       	brcc	.+44     	; 0x9e0 <__stack+0xe1>
     9b4:	b6 01       	movw	r22, r12
     9b6:	80 e2       	ldi	r24, 0x20	; 32
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     9be:	2a 94       	dec	r2
     9c0:	f4 cf       	rjmp	.-24     	; 0x9aa <__stack+0xab>
     9c2:	f5 01       	movw	r30, r10
     9c4:	37 fc       	sbrc	r3, 7
     9c6:	85 91       	lpm	r24, Z+
     9c8:	37 fe       	sbrs	r3, 7
     9ca:	81 91       	ld	r24, Z+
     9cc:	5f 01       	movw	r10, r30
     9ce:	b6 01       	movw	r22, r12
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     9d6:	21 10       	cpse	r2, r1
     9d8:	2a 94       	dec	r2
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	82 1a       	sub	r8, r18
     9de:	91 08       	sbc	r9, r1
     9e0:	81 14       	cp	r8, r1
     9e2:	91 04       	cpc	r9, r1
     9e4:	71 f7       	brne	.-36     	; 0x9c2 <__stack+0xc3>
     9e6:	e8 c0       	rjmp	.+464    	; 0xbb8 <__stack+0x2b9>
     9e8:	84 36       	cpi	r24, 0x64	; 100
     9ea:	11 f0       	breq	.+4      	; 0x9f0 <__stack+0xf1>
     9ec:	89 36       	cpi	r24, 0x69	; 105
     9ee:	41 f5       	brne	.+80     	; 0xa40 <__stack+0x141>
     9f0:	f8 01       	movw	r30, r16
     9f2:	37 fe       	sbrs	r3, 7
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
     9f6:	60 81       	ld	r22, Z
     9f8:	71 81       	ldd	r23, Z+1	; 0x01
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	0c 5f       	subi	r16, 0xFC	; 252
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	08 c0       	rjmp	.+16     	; 0xa14 <__stack+0x115>
     a04:	60 81       	ld	r22, Z
     a06:	71 81       	ldd	r23, Z+1	; 0x01
     a08:	07 2e       	mov	r0, r23
     a0a:	00 0c       	add	r0, r0
     a0c:	88 0b       	sbc	r24, r24
     a0e:	99 0b       	sbc	r25, r25
     a10:	0e 5f       	subi	r16, 0xFE	; 254
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	f3 2d       	mov	r31, r3
     a16:	ff 76       	andi	r31, 0x6F	; 111
     a18:	3f 2e       	mov	r3, r31
     a1a:	97 ff       	sbrs	r25, 7
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__stack+0x131>
     a1e:	90 95       	com	r25
     a20:	80 95       	com	r24
     a22:	70 95       	com	r23
     a24:	61 95       	neg	r22
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	8f 4f       	sbci	r24, 0xFF	; 255
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	f0 68       	ori	r31, 0x80	; 128
     a2e:	3f 2e       	mov	r3, r31
     a30:	2a e0       	ldi	r18, 0x0A	; 10
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	a3 01       	movw	r20, r6
     a36:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     a3a:	88 2e       	mov	r8, r24
     a3c:	86 18       	sub	r8, r6
     a3e:	45 c0       	rjmp	.+138    	; 0xaca <__stack+0x1cb>
     a40:	85 37       	cpi	r24, 0x75	; 117
     a42:	31 f4       	brne	.+12     	; 0xa50 <__stack+0x151>
     a44:	23 2d       	mov	r18, r3
     a46:	2f 7e       	andi	r18, 0xEF	; 239
     a48:	b2 2e       	mov	r11, r18
     a4a:	2a e0       	ldi	r18, 0x0A	; 10
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	25 c0       	rjmp	.+74     	; 0xa9a <__stack+0x19b>
     a50:	93 2d       	mov	r25, r3
     a52:	99 7f       	andi	r25, 0xF9	; 249
     a54:	b9 2e       	mov	r11, r25
     a56:	8f 36       	cpi	r24, 0x6F	; 111
     a58:	c1 f0       	breq	.+48     	; 0xa8a <__stack+0x18b>
     a5a:	18 f4       	brcc	.+6      	; 0xa62 <__stack+0x163>
     a5c:	88 35       	cpi	r24, 0x58	; 88
     a5e:	79 f0       	breq	.+30     	; 0xa7e <__stack+0x17f>
     a60:	b5 c0       	rjmp	.+362    	; 0xbcc <__stack+0x2cd>
     a62:	80 37       	cpi	r24, 0x70	; 112
     a64:	19 f0       	breq	.+6      	; 0xa6c <__stack+0x16d>
     a66:	88 37       	cpi	r24, 0x78	; 120
     a68:	21 f0       	breq	.+8      	; 0xa72 <__stack+0x173>
     a6a:	b0 c0       	rjmp	.+352    	; 0xbcc <__stack+0x2cd>
     a6c:	e9 2f       	mov	r30, r25
     a6e:	e0 61       	ori	r30, 0x10	; 16
     a70:	be 2e       	mov	r11, r30
     a72:	b4 fe       	sbrs	r11, 4
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <__stack+0x191>
     a76:	fb 2d       	mov	r31, r11
     a78:	f4 60       	ori	r31, 0x04	; 4
     a7a:	bf 2e       	mov	r11, r31
     a7c:	09 c0       	rjmp	.+18     	; 0xa90 <__stack+0x191>
     a7e:	34 fe       	sbrs	r3, 4
     a80:	0a c0       	rjmp	.+20     	; 0xa96 <__stack+0x197>
     a82:	29 2f       	mov	r18, r25
     a84:	26 60       	ori	r18, 0x06	; 6
     a86:	b2 2e       	mov	r11, r18
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <__stack+0x197>
     a8a:	28 e0       	ldi	r18, 0x08	; 8
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <__stack+0x19b>
     a90:	20 e1       	ldi	r18, 0x10	; 16
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
     a96:	20 e1       	ldi	r18, 0x10	; 16
     a98:	32 e0       	ldi	r19, 0x02	; 2
     a9a:	f8 01       	movw	r30, r16
     a9c:	b7 fe       	sbrs	r11, 7
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <__stack+0x1af>
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	82 81       	ldd	r24, Z+2	; 0x02
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	0c 5f       	subi	r16, 0xFC	; 252
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	06 c0       	rjmp	.+12     	; 0xaba <__stack+0x1bb>
     aae:	60 81       	ld	r22, Z
     ab0:	71 81       	ldd	r23, Z+1	; 0x01
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 5f       	subi	r16, 0xFE	; 254
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	a3 01       	movw	r20, r6
     abc:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     ac0:	88 2e       	mov	r8, r24
     ac2:	86 18       	sub	r8, r6
     ac4:	fb 2d       	mov	r31, r11
     ac6:	ff 77       	andi	r31, 0x7F	; 127
     ac8:	3f 2e       	mov	r3, r31
     aca:	36 fe       	sbrs	r3, 6
     acc:	0d c0       	rjmp	.+26     	; 0xae8 <__stack+0x1e9>
     ace:	23 2d       	mov	r18, r3
     ad0:	2e 7f       	andi	r18, 0xFE	; 254
     ad2:	a2 2e       	mov	r10, r18
     ad4:	89 14       	cp	r8, r9
     ad6:	58 f4       	brcc	.+22     	; 0xaee <__stack+0x1ef>
     ad8:	34 fe       	sbrs	r3, 4
     ada:	0b c0       	rjmp	.+22     	; 0xaf2 <__stack+0x1f3>
     adc:	32 fc       	sbrc	r3, 2
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__stack+0x1f3>
     ae0:	83 2d       	mov	r24, r3
     ae2:	8e 7e       	andi	r24, 0xEE	; 238
     ae4:	a8 2e       	mov	r10, r24
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <__stack+0x1f3>
     ae8:	b8 2c       	mov	r11, r8
     aea:	a3 2c       	mov	r10, r3
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <__stack+0x1f5>
     aee:	b8 2c       	mov	r11, r8
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__stack+0x1f5>
     af2:	b9 2c       	mov	r11, r9
     af4:	a4 fe       	sbrs	r10, 4
     af6:	0f c0       	rjmp	.+30     	; 0xb16 <__stack+0x217>
     af8:	fe 01       	movw	r30, r28
     afa:	e8 0d       	add	r30, r8
     afc:	f1 1d       	adc	r31, r1
     afe:	80 81       	ld	r24, Z
     b00:	80 33       	cpi	r24, 0x30	; 48
     b02:	21 f4       	brne	.+8      	; 0xb0c <__stack+0x20d>
     b04:	9a 2d       	mov	r25, r10
     b06:	99 7e       	andi	r25, 0xE9	; 233
     b08:	a9 2e       	mov	r10, r25
     b0a:	09 c0       	rjmp	.+18     	; 0xb1e <__stack+0x21f>
     b0c:	a2 fe       	sbrs	r10, 2
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <__stack+0x21d>
     b10:	b3 94       	inc	r11
     b12:	b3 94       	inc	r11
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__stack+0x21f>
     b16:	8a 2d       	mov	r24, r10
     b18:	86 78       	andi	r24, 0x86	; 134
     b1a:	09 f0       	breq	.+2      	; 0xb1e <__stack+0x21f>
     b1c:	b3 94       	inc	r11
     b1e:	a3 fc       	sbrc	r10, 3
     b20:	11 c0       	rjmp	.+34     	; 0xb44 <__stack+0x245>
     b22:	a0 fe       	sbrs	r10, 0
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <__stack+0x233>
     b26:	b2 14       	cp	r11, r2
     b28:	88 f4       	brcc	.+34     	; 0xb4c <__stack+0x24d>
     b2a:	28 0c       	add	r2, r8
     b2c:	92 2c       	mov	r9, r2
     b2e:	9b 18       	sub	r9, r11
     b30:	0e c0       	rjmp	.+28     	; 0xb4e <__stack+0x24f>
     b32:	b2 14       	cp	r11, r2
     b34:	60 f4       	brcc	.+24     	; 0xb4e <__stack+0x24f>
     b36:	b6 01       	movw	r22, r12
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     b40:	b3 94       	inc	r11
     b42:	f7 cf       	rjmp	.-18     	; 0xb32 <__stack+0x233>
     b44:	b2 14       	cp	r11, r2
     b46:	18 f4       	brcc	.+6      	; 0xb4e <__stack+0x24f>
     b48:	2b 18       	sub	r2, r11
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__stack+0x251>
     b4c:	98 2c       	mov	r9, r8
     b4e:	21 2c       	mov	r2, r1
     b50:	a4 fe       	sbrs	r10, 4
     b52:	10 c0       	rjmp	.+32     	; 0xb74 <__stack+0x275>
     b54:	b6 01       	movw	r22, r12
     b56:	80 e3       	ldi	r24, 0x30	; 48
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     b5e:	a2 fe       	sbrs	r10, 2
     b60:	17 c0       	rjmp	.+46     	; 0xb90 <__stack+0x291>
     b62:	a1 fc       	sbrc	r10, 1
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__stack+0x26d>
     b66:	88 e7       	ldi	r24, 0x78	; 120
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <__stack+0x271>
     b6c:	88 e5       	ldi	r24, 0x58	; 88
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	b6 01       	movw	r22, r12
     b72:	0c c0       	rjmp	.+24     	; 0xb8c <__stack+0x28d>
     b74:	8a 2d       	mov	r24, r10
     b76:	86 78       	andi	r24, 0x86	; 134
     b78:	59 f0       	breq	.+22     	; 0xb90 <__stack+0x291>
     b7a:	a1 fe       	sbrs	r10, 1
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <__stack+0x283>
     b7e:	8b e2       	ldi	r24, 0x2B	; 43
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <__stack+0x285>
     b82:	80 e2       	ldi	r24, 0x20	; 32
     b84:	a7 fc       	sbrc	r10, 7
     b86:	8d e2       	ldi	r24, 0x2D	; 45
     b88:	b6 01       	movw	r22, r12
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     b90:	89 14       	cp	r8, r9
     b92:	38 f4       	brcc	.+14     	; 0xba2 <__stack+0x2a3>
     b94:	b6 01       	movw	r22, r12
     b96:	80 e3       	ldi	r24, 0x30	; 48
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     b9e:	9a 94       	dec	r9
     ba0:	f7 cf       	rjmp	.-18     	; 0xb90 <__stack+0x291>
     ba2:	8a 94       	dec	r8
     ba4:	f3 01       	movw	r30, r6
     ba6:	e8 0d       	add	r30, r8
     ba8:	f1 1d       	adc	r31, r1
     baa:	80 81       	ld	r24, Z
     bac:	b6 01       	movw	r22, r12
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     bb4:	81 10       	cpse	r8, r1
     bb6:	f5 cf       	rjmp	.-22     	; 0xba2 <__stack+0x2a3>
     bb8:	22 20       	and	r2, r2
     bba:	09 f4       	brne	.+2      	; 0xbbe <__stack+0x2bf>
     bbc:	42 ce       	rjmp	.-892    	; 0x842 <vfprintf+0x24>
     bbe:	b6 01       	movw	r22, r12
     bc0:	80 e2       	ldi	r24, 0x20	; 32
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     bc8:	2a 94       	dec	r2
     bca:	f6 cf       	rjmp	.-20     	; 0xbb8 <__stack+0x2b9>
     bcc:	f6 01       	movw	r30, r12
     bce:	86 81       	ldd	r24, Z+6	; 0x06
     bd0:	97 81       	ldd	r25, Z+7	; 0x07
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <__stack+0x2d9>
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	2b 96       	adiw	r28, 0x0b	; 11
     bda:	e2 e1       	ldi	r30, 0x12	; 18
     bdc:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__epilogue_restores__>

00000be0 <strtod>:
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 ef       	ldi	r30, 0xF6	; 246
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__prologue_saves__+0xc>
     bec:	ec 01       	movw	r28, r24
     bee:	6b 01       	movw	r12, r22
     bf0:	61 15       	cp	r22, r1
     bf2:	71 05       	cpc	r23, r1
     bf4:	19 f0       	breq	.+6      	; 0xbfc <strtod+0x1c>
     bf6:	fb 01       	movw	r30, r22
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
     bfc:	7e 01       	movw	r14, r28
     bfe:	ff ef       	ldi	r31, 0xFF	; 255
     c00:	ef 1a       	sub	r14, r31
     c02:	ff 0a       	sbc	r15, r31
     c04:	08 81       	ld	r16, Y
     c06:	80 2f       	mov	r24, r16
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <isspace>
     c0e:	89 2b       	or	r24, r25
     c10:	11 f0       	breq	.+4      	; 0xc16 <strtod+0x36>
     c12:	e7 01       	movw	r28, r14
     c14:	f3 cf       	rjmp	.-26     	; 0xbfc <strtod+0x1c>
     c16:	0d 32       	cpi	r16, 0x2D	; 45
     c18:	39 f4       	brne	.+14     	; 0xc28 <strtod+0x48>
     c1a:	7e 01       	movw	r14, r28
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	e8 0e       	add	r14, r24
     c20:	f1 1c       	adc	r15, r1
     c22:	09 81       	ldd	r16, Y+1	; 0x01
     c24:	11 e0       	ldi	r17, 0x01	; 1
     c26:	08 c0       	rjmp	.+16     	; 0xc38 <strtod+0x58>
     c28:	0b 32       	cpi	r16, 0x2B	; 43
     c2a:	29 f4       	brne	.+10     	; 0xc36 <strtod+0x56>
     c2c:	7e 01       	movw	r14, r28
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	e9 0e       	add	r14, r25
     c32:	f1 1c       	adc	r15, r1
     c34:	09 81       	ldd	r16, Y+1	; 0x01
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	e7 01       	movw	r28, r14
     c3a:	21 97       	sbiw	r28, 0x01	; 1
     c3c:	43 e0       	ldi	r20, 0x03	; 3
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e7       	ldi	r22, 0x70	; 112
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 47 07 	call	0xe8e	; 0xe8e <strncasecmp_P>
     c4a:	89 2b       	or	r24, r25
     c4c:	c1 f4       	brne	.+48     	; 0xc7e <strtod+0x9e>
     c4e:	23 96       	adiw	r28, 0x03	; 3
     c50:	45 e0       	ldi	r20, 0x05	; 5
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	6b e6       	ldi	r22, 0x6B	; 107
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 47 07 	call	0xe8e	; 0xe8e <strncasecmp_P>
     c5e:	89 2b       	or	r24, r25
     c60:	09 f4       	brne	.+2      	; 0xc64 <strtod+0x84>
     c62:	25 96       	adiw	r28, 0x05	; 5
     c64:	c1 14       	cp	r12, r1
     c66:	d1 04       	cpc	r13, r1
     c68:	19 f0       	breq	.+6      	; 0xc70 <strtod+0x90>
     c6a:	f6 01       	movw	r30, r12
     c6c:	d1 83       	std	Z+1, r29	; 0x01
     c6e:	c0 83       	st	Z, r28
     c70:	11 11       	cpse	r17, r1
     c72:	f6 c0       	rjmp	.+492    	; 0xe60 <strtod+0x280>
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 e8       	ldi	r24, 0x80	; 128
     c7a:	9f e7       	ldi	r25, 0x7F	; 127
     c7c:	fa c0       	rjmp	.+500    	; 0xe72 <strtod+0x292>
     c7e:	43 e0       	ldi	r20, 0x03	; 3
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	68 e6       	ldi	r22, 0x68	; 104
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	0e 94 47 07 	call	0xe8e	; 0xe8e <strncasecmp_P>
     c8c:	89 2b       	or	r24, r25
     c8e:	59 f4       	brne	.+22     	; 0xca6 <strtod+0xc6>
     c90:	c1 14       	cp	r12, r1
     c92:	d1 04       	cpc	r13, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <strtod+0xb8>
     c96:	e9 c0       	rjmp	.+466    	; 0xe6a <strtod+0x28a>
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	ef 0e       	add	r14, r31
     c9c:	f1 1c       	adc	r15, r1
     c9e:	f6 01       	movw	r30, r12
     ca0:	f1 82       	std	Z+1, r15	; 0x01
     ca2:	e0 82       	st	Z, r14
     ca4:	e2 c0       	rjmp	.+452    	; 0xe6a <strtod+0x28a>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	f7 01       	movw	r30, r14
     cb2:	80 ed       	ldi	r24, 0xD0	; 208
     cb4:	a8 2e       	mov	r10, r24
     cb6:	a0 0e       	add	r10, r16
     cb8:	89 e0       	ldi	r24, 0x09	; 9
     cba:	8a 15       	cp	r24, r10
     cbc:	30 f1       	brcs	.+76     	; 0xd0a <strtod+0x12a>
     cbe:	91 2f       	mov	r25, r17
     cc0:	92 60       	ori	r25, 0x02	; 2
     cc2:	b9 2e       	mov	r11, r25
     cc4:	81 2f       	mov	r24, r17
     cc6:	88 70       	andi	r24, 0x08	; 8
     cc8:	12 ff       	sbrs	r17, 2
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <strtod+0xf4>
     ccc:	81 11       	cpse	r24, r1
     cce:	24 c0       	rjmp	.+72     	; 0xd18 <strtod+0x138>
     cd0:	21 96       	adiw	r28, 0x01	; 1
     cd2:	22 c0       	rjmp	.+68     	; 0xd18 <strtod+0x138>
     cd4:	81 11       	cpse	r24, r1
     cd6:	21 97       	sbiw	r28, 0x01	; 1
     cd8:	a5 e0       	ldi	r26, 0x05	; 5
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	0e 94 22 09 	call	0x1244	; 0x1244 <__muluhisi3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	aa 1f       	adc	r26, r26
     cea:	bb 1f       	adc	r27, r27
     cec:	9c 01       	movw	r18, r24
     cee:	ad 01       	movw	r20, r26
     cf0:	2a 0d       	add	r18, r10
     cf2:	31 1d       	adc	r19, r1
     cf4:	41 1d       	adc	r20, r1
     cf6:	51 1d       	adc	r21, r1
     cf8:	28 39       	cpi	r18, 0x98	; 152
     cfa:	89 e9       	ldi	r24, 0x99	; 153
     cfc:	38 07       	cpc	r19, r24
     cfe:	48 07       	cpc	r20, r24
     d00:	89 e1       	ldi	r24, 0x19	; 25
     d02:	58 07       	cpc	r21, r24
     d04:	48 f0       	brcs	.+18     	; 0xd18 <strtod+0x138>
     d06:	16 60       	ori	r17, 0x06	; 6
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <strtod+0x136>
     d0a:	9e ef       	ldi	r25, 0xFE	; 254
     d0c:	a9 12       	cpse	r10, r25
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <strtod+0x144>
     d10:	13 fd       	sbrc	r17, 3
     d12:	40 c0       	rjmp	.+128    	; 0xd94 <strtod+0x1b4>
     d14:	18 60       	ori	r17, 0x08	; 8
     d16:	b1 2e       	mov	r11, r17
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	e8 1a       	sub	r14, r24
     d1c:	f8 0a       	sbc	r15, r24
     d1e:	00 81       	ld	r16, Z
     d20:	1b 2d       	mov	r17, r11
     d22:	c6 cf       	rjmp	.-116    	; 0xcb0 <strtod+0xd0>
     d24:	80 2f       	mov	r24, r16
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	85 34       	cpi	r24, 0x45	; 69
     d2a:	a1 f5       	brne	.+104    	; 0xd94 <strtod+0x1b4>
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 32       	cpi	r24, 0x2D	; 45
     d30:	11 f4       	brne	.+4      	; 0xd36 <strtod+0x156>
     d32:	10 61       	ori	r17, 0x10	; 16
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <strtod+0x162>
     d36:	8b 32       	cpi	r24, 0x2B	; 43
     d38:	21 f0       	breq	.+8      	; 0xd42 <strtod+0x162>
     d3a:	31 96       	adiw	r30, 0x01	; 1
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <strtod+0x16a>
     d42:	81 81       	ldd	r24, Z+1	; 0x01
     d44:	32 96       	adiw	r30, 0x02	; 2
     d46:	62 e0       	ldi	r22, 0x02	; 2
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 53       	subi	r24, 0x30	; 48
     d4c:	8a 30       	cpi	r24, 0x0A	; 10
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <strtod+0x176>
     d50:	e6 1b       	sub	r30, r22
     d52:	f7 0b       	sbc	r31, r23
     d54:	1f c0       	rjmp	.+62     	; 0xd94 <strtod+0x1b4>
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	60 38       	cpi	r22, 0x80	; 128
     d5c:	9c e0       	ldi	r25, 0x0C	; 12
     d5e:	79 07       	cpc	r23, r25
     d60:	5c f4       	brge	.+22     	; 0xd78 <strtod+0x198>
     d62:	db 01       	movw	r26, r22
     d64:	aa 0f       	add	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	aa 0f       	add	r26, r26
     d6a:	bb 1f       	adc	r27, r27
     d6c:	6a 0f       	add	r22, r26
     d6e:	7b 1f       	adc	r23, r27
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	68 0f       	add	r22, r24
     d76:	71 1d       	adc	r23, r1
     d78:	31 96       	adiw	r30, 0x01	; 1
     d7a:	df 01       	movw	r26, r30
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	8c 91       	ld	r24, X
     d80:	80 53       	subi	r24, 0x30	; 48
     d82:	8a 30       	cpi	r24, 0x0A	; 10
     d84:	50 f3       	brcs	.-44     	; 0xd5a <strtod+0x17a>
     d86:	14 ff       	sbrs	r17, 4
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <strtod+0x1b0>
     d8a:	71 95       	neg	r23
     d8c:	61 95       	neg	r22
     d8e:	71 09       	sbc	r23, r1
     d90:	c6 0f       	add	r28, r22
     d92:	d7 1f       	adc	r29, r23
     d94:	11 ff       	sbrs	r17, 1
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <strtod+0x1c8>
     d98:	c1 14       	cp	r12, r1
     d9a:	d1 04       	cpc	r13, r1
     d9c:	29 f0       	breq	.+10     	; 0xda8 <strtod+0x1c8>
     d9e:	cf 01       	movw	r24, r30
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f6 01       	movw	r30, r12
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 24 08 	call	0x1048	; 0x1048 <__floatunsisf>
     db0:	21 2f       	mov	r18, r17
     db2:	23 70       	andi	r18, 0x03	; 3
     db4:	23 30       	cpi	r18, 0x03	; 3
     db6:	19 f0       	breq	.+6      	; 0xdbe <strtod+0x1de>
     db8:	4b 01       	movw	r8, r22
     dba:	5c 01       	movw	r10, r24
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <strtod+0x1ea>
     dbe:	4b 01       	movw	r8, r22
     dc0:	5c 01       	movw	r10, r24
     dc2:	b7 fa       	bst	r11, 7
     dc4:	b0 94       	com	r11
     dc6:	b7 f8       	bld	r11, 7
     dc8:	b0 94       	com	r11
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	c5 01       	movw	r24, r10
     dd2:	b4 01       	movw	r22, r8
     dd4:	0e 94 1f 08 	call	0x103e	; 0x103e <__cmpsf2>
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <strtod+0x1fe>
     ddc:	3e c0       	rjmp	.+124    	; 0xe5a <strtod+0x27a>
     dde:	d7 ff       	sbrs	r29, 7
     de0:	06 c0       	rjmp	.+12     	; 0xdee <strtod+0x20e>
     de2:	d1 95       	neg	r29
     de4:	c1 95       	neg	r28
     de6:	d1 09       	sbc	r29, r1
     de8:	07 e8       	ldi	r16, 0x87	; 135
     dea:	10 e0       	ldi	r17, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <strtod+0x212>
     dee:	0f e9       	ldi	r16, 0x9F	; 159
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	68 01       	movw	r12, r16
     df4:	f8 e1       	ldi	r31, 0x18	; 24
     df6:	cf 1a       	sub	r12, r31
     df8:	d1 08       	sbc	r13, r1
     dfa:	90 e2       	ldi	r25, 0x20	; 32
     dfc:	e9 2e       	mov	r14, r25
     dfe:	f1 2c       	mov	r15, r1
     e00:	ce 15       	cp	r28, r14
     e02:	df 05       	cpc	r29, r15
     e04:	74 f0       	brlt	.+28     	; 0xe22 <strtod+0x242>
     e06:	f8 01       	movw	r30, r16
     e08:	25 91       	lpm	r18, Z+
     e0a:	35 91       	lpm	r19, Z+
     e0c:	45 91       	lpm	r20, Z+
     e0e:	54 91       	lpm	r21, Z
     e10:	c5 01       	movw	r24, r10
     e12:	b4 01       	movw	r22, r8
     e14:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     e18:	4b 01       	movw	r8, r22
     e1a:	5c 01       	movw	r10, r24
     e1c:	ce 19       	sub	r28, r14
     e1e:	df 09       	sbc	r29, r15
     e20:	ef cf       	rjmp	.-34     	; 0xe00 <strtod+0x220>
     e22:	04 50       	subi	r16, 0x04	; 4
     e24:	11 09       	sbc	r17, r1
     e26:	f5 94       	asr	r15
     e28:	e7 94       	ror	r14
     e2a:	0c 15       	cp	r16, r12
     e2c:	1d 05       	cpc	r17, r13
     e2e:	41 f7       	brne	.-48     	; 0xe00 <strtod+0x220>
     e30:	8a 2d       	mov	r24, r10
     e32:	88 0f       	add	r24, r24
     e34:	8b 2d       	mov	r24, r11
     e36:	88 1f       	adc	r24, r24
     e38:	8f 3f       	cpi	r24, 0xFF	; 255
     e3a:	49 f0       	breq	.+18     	; 0xe4e <strtod+0x26e>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	a9 01       	movw	r20, r18
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 1f 08 	call	0x103e	; 0x103e <__cmpsf2>
     e4a:	81 11       	cpse	r24, r1
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <strtod+0x27a>
     e4e:	82 e2       	ldi	r24, 0x22	; 34
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <errno+0x1>
     e56:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <errno>
     e5a:	c5 01       	movw	r24, r10
     e5c:	b4 01       	movw	r22, r8
     e5e:	09 c0       	rjmp	.+18     	; 0xe72 <strtod+0x292>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	9f ef       	ldi	r25, 0xFF	; 255
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <strtod+0x292>
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 ec       	ldi	r24, 0xC0	; 192
     e70:	9f e7       	ldi	r25, 0x7F	; 127
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	ec e0       	ldi	r30, 0x0C	; 12
     e78:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__epilogue_restores__+0xc>

00000e7c <isspace>:
     e7c:	91 11       	cpse	r25, r1
     e7e:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__ctype_isfalse>
     e82:	80 32       	cpi	r24, 0x20	; 32
     e84:	19 f0       	breq	.+6      	; 0xe8c <isspace+0x10>
     e86:	89 50       	subi	r24, 0x09	; 9
     e88:	85 50       	subi	r24, 0x05	; 5
     e8a:	c8 f7       	brcc	.-14     	; 0xe7e <isspace+0x2>
     e8c:	08 95       	ret

00000e8e <strncasecmp_P>:
     e8e:	fb 01       	movw	r30, r22
     e90:	dc 01       	movw	r26, r24
     e92:	41 50       	subi	r20, 0x01	; 1
     e94:	50 40       	sbci	r21, 0x00	; 0
     e96:	88 f0       	brcs	.+34     	; 0xeba <strncasecmp_P+0x2c>
     e98:	8d 91       	ld	r24, X+
     e9a:	81 34       	cpi	r24, 0x41	; 65
     e9c:	1c f0       	brlt	.+6      	; 0xea4 <strncasecmp_P+0x16>
     e9e:	8b 35       	cpi	r24, 0x5B	; 91
     ea0:	0c f4       	brge	.+2      	; 0xea4 <strncasecmp_P+0x16>
     ea2:	80 5e       	subi	r24, 0xE0	; 224
     ea4:	65 91       	lpm	r22, Z+
     ea6:	61 34       	cpi	r22, 0x41	; 65
     ea8:	1c f0       	brlt	.+6      	; 0xeb0 <strncasecmp_P+0x22>
     eaa:	6b 35       	cpi	r22, 0x5B	; 91
     eac:	0c f4       	brge	.+2      	; 0xeb0 <strncasecmp_P+0x22>
     eae:	60 5e       	subi	r22, 0xE0	; 224
     eb0:	86 1b       	sub	r24, r22
     eb2:	61 11       	cpse	r22, r1
     eb4:	71 f3       	breq	.-36     	; 0xe92 <strncasecmp_P+0x4>
     eb6:	99 0b       	sbc	r25, r25
     eb8:	08 95       	ret
     eba:	88 1b       	sub	r24, r24
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <strncasecmp_P+0x28>

00000ebe <strnlen_P>:
     ebe:	fc 01       	movw	r30, r24
     ec0:	05 90       	lpm	r0, Z+
     ec2:	61 50       	subi	r22, 0x01	; 1
     ec4:	70 40       	sbci	r23, 0x00	; 0
     ec6:	01 10       	cpse	r0, r1
     ec8:	d8 f7       	brcc	.-10     	; 0xec0 <strnlen_P+0x2>
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	8e 0f       	add	r24, r30
     ed0:	9f 1f       	adc	r25, r31
     ed2:	08 95       	ret

00000ed4 <strnlen>:
     ed4:	fc 01       	movw	r30, r24
     ed6:	61 50       	subi	r22, 0x01	; 1
     ed8:	70 40       	sbci	r23, 0x00	; 0
     eda:	01 90       	ld	r0, Z+
     edc:	01 10       	cpse	r0, r1
     ede:	d8 f7       	brcc	.-10     	; 0xed6 <strnlen+0x2>
     ee0:	80 95       	com	r24
     ee2:	90 95       	com	r25
     ee4:	8e 0f       	add	r24, r30
     ee6:	9f 1f       	adc	r25, r31
     ee8:	08 95       	ret

00000eea <strrev>:
     eea:	dc 01       	movw	r26, r24
     eec:	fc 01       	movw	r30, r24
     eee:	67 2f       	mov	r22, r23
     ef0:	71 91       	ld	r23, Z+
     ef2:	77 23       	and	r23, r23
     ef4:	e1 f7       	brne	.-8      	; 0xeee <strrev+0x4>
     ef6:	32 97       	sbiw	r30, 0x02	; 2
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <strrev+0x18>
     efa:	7c 91       	ld	r23, X
     efc:	6d 93       	st	X+, r22
     efe:	70 83       	st	Z, r23
     f00:	62 91       	ld	r22, -Z
     f02:	ae 17       	cp	r26, r30
     f04:	bf 07       	cpc	r27, r31
     f06:	c8 f3       	brcs	.-14     	; 0xefa <strrev+0x10>
     f08:	08 95       	ret

00000f0a <fputc>:
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	fb 01       	movw	r30, r22
     f14:	23 81       	ldd	r18, Z+3	; 0x03
     f16:	21 fd       	sbrc	r18, 1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <fputc+0x16>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	2c c0       	rjmp	.+88     	; 0xf78 <fputc+0x6e>
     f20:	22 ff       	sbrs	r18, 2
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <fputc+0x46>
     f24:	46 81       	ldd	r20, Z+6	; 0x06
     f26:	57 81       	ldd	r21, Z+7	; 0x07
     f28:	24 81       	ldd	r18, Z+4	; 0x04
     f2a:	35 81       	ldd	r19, Z+5	; 0x05
     f2c:	42 17       	cp	r20, r18
     f2e:	53 07       	cpc	r21, r19
     f30:	44 f4       	brge	.+16     	; 0xf42 <fputc+0x38>
     f32:	a0 81       	ld	r26, Z
     f34:	b1 81       	ldd	r27, Z+1	; 0x01
     f36:	9d 01       	movw	r18, r26
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	31 83       	std	Z+1, r19	; 0x01
     f3e:	20 83       	st	Z, r18
     f40:	8c 93       	st	X, r24
     f42:	26 81       	ldd	r18, Z+6	; 0x06
     f44:	37 81       	ldd	r19, Z+7	; 0x07
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	37 83       	std	Z+7, r19	; 0x07
     f4c:	26 83       	std	Z+6, r18	; 0x06
     f4e:	14 c0       	rjmp	.+40     	; 0xf78 <fputc+0x6e>
     f50:	8b 01       	movw	r16, r22
     f52:	ec 01       	movw	r28, r24
     f54:	fb 01       	movw	r30, r22
     f56:	00 84       	ldd	r0, Z+8	; 0x08
     f58:	f1 85       	ldd	r31, Z+9	; 0x09
     f5a:	e0 2d       	mov	r30, r0
     f5c:	09 95       	icall
     f5e:	89 2b       	or	r24, r25
     f60:	e1 f6       	brne	.-72     	; 0xf1a <fputc+0x10>
     f62:	d8 01       	movw	r26, r16
     f64:	16 96       	adiw	r26, 0x06	; 6
     f66:	8d 91       	ld	r24, X+
     f68:	9c 91       	ld	r25, X
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	17 96       	adiw	r26, 0x07	; 7
     f70:	9c 93       	st	X, r25
     f72:	8e 93       	st	-X, r24
     f74:	16 97       	sbiw	r26, 0x06	; 6
     f76:	ce 01       	movw	r24, r28
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <__ultoa_invert>:
     f82:	fa 01       	movw	r30, r20
     f84:	aa 27       	eor	r26, r26
     f86:	28 30       	cpi	r18, 0x08	; 8
     f88:	51 f1       	breq	.+84     	; 0xfde <__ultoa_invert+0x5c>
     f8a:	20 31       	cpi	r18, 0x10	; 16
     f8c:	81 f1       	breq	.+96     	; 0xfee <__ultoa_invert+0x6c>
     f8e:	e8 94       	clt
     f90:	6f 93       	push	r22
     f92:	6e 7f       	andi	r22, 0xFE	; 254
     f94:	6e 5f       	subi	r22, 0xFE	; 254
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	af 4f       	sbci	r26, 0xFF	; 255
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	3e d0       	rcall	.+124    	; 0x101e <__ultoa_invert+0x9c>
     fa2:	b4 e0       	ldi	r27, 0x04	; 4
     fa4:	3c d0       	rcall	.+120    	; 0x101e <__ultoa_invert+0x9c>
     fa6:	67 0f       	add	r22, r23
     fa8:	78 1f       	adc	r23, r24
     faa:	89 1f       	adc	r24, r25
     fac:	9a 1f       	adc	r25, r26
     fae:	a1 1d       	adc	r26, r1
     fb0:	68 0f       	add	r22, r24
     fb2:	79 1f       	adc	r23, r25
     fb4:	8a 1f       	adc	r24, r26
     fb6:	91 1d       	adc	r25, r1
     fb8:	a1 1d       	adc	r26, r1
     fba:	6a 0f       	add	r22, r26
     fbc:	71 1d       	adc	r23, r1
     fbe:	81 1d       	adc	r24, r1
     fc0:	91 1d       	adc	r25, r1
     fc2:	a1 1d       	adc	r26, r1
     fc4:	20 d0       	rcall	.+64     	; 0x1006 <__ultoa_invert+0x84>
     fc6:	09 f4       	brne	.+2      	; 0xfca <__ultoa_invert+0x48>
     fc8:	68 94       	set
     fca:	3f 91       	pop	r19
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	26 9f       	mul	r18, r22
     fd0:	11 24       	eor	r1, r1
     fd2:	30 19       	sub	r19, r0
     fd4:	30 5d       	subi	r19, 0xD0	; 208
     fd6:	31 93       	st	Z+, r19
     fd8:	de f6       	brtc	.-74     	; 0xf90 <__ultoa_invert+0xe>
     fda:	cf 01       	movw	r24, r30
     fdc:	08 95       	ret
     fde:	46 2f       	mov	r20, r22
     fe0:	47 70       	andi	r20, 0x07	; 7
     fe2:	40 5d       	subi	r20, 0xD0	; 208
     fe4:	41 93       	st	Z+, r20
     fe6:	b3 e0       	ldi	r27, 0x03	; 3
     fe8:	0f d0       	rcall	.+30     	; 0x1008 <__ultoa_invert+0x86>
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x5c>
     fec:	f6 cf       	rjmp	.-20     	; 0xfda <__ultoa_invert+0x58>
     fee:	46 2f       	mov	r20, r22
     ff0:	4f 70       	andi	r20, 0x0F	; 15
     ff2:	40 5d       	subi	r20, 0xD0	; 208
     ff4:	4a 33       	cpi	r20, 0x3A	; 58
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__ultoa_invert+0x7c>
     ff8:	49 5d       	subi	r20, 0xD9	; 217
     ffa:	31 fd       	sbrc	r19, 1
     ffc:	40 52       	subi	r20, 0x20	; 32
     ffe:	41 93       	st	Z+, r20
    1000:	02 d0       	rcall	.+4      	; 0x1006 <__ultoa_invert+0x84>
    1002:	a9 f7       	brne	.-22     	; 0xfee <__ultoa_invert+0x6c>
    1004:	ea cf       	rjmp	.-44     	; 0xfda <__ultoa_invert+0x58>
    1006:	b4 e0       	ldi	r27, 0x04	; 4
    1008:	a6 95       	lsr	r26
    100a:	97 95       	ror	r25
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0x86>
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 05       	cpc	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	08 95       	ret
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	0a 2e       	mov	r0, r26
    1024:	06 94       	lsr	r0
    1026:	57 95       	ror	r21
    1028:	47 95       	ror	r20
    102a:	37 95       	ror	r19
    102c:	27 95       	ror	r18
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__ultoa_invert+0xa2>
    1032:	62 0f       	add	r22, r18
    1034:	73 1f       	adc	r23, r19
    1036:	84 1f       	adc	r24, r20
    1038:	95 1f       	adc	r25, r21
    103a:	a0 1d       	adc	r26, r0
    103c:	08 95       	ret

0000103e <__cmpsf2>:
    103e:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_cmp>
    1042:	08 f4       	brcc	.+2      	; 0x1046 <__cmpsf2+0x8>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 95       	ret

00001048 <__floatunsisf>:
    1048:	e8 94       	clt
    104a:	09 c0       	rjmp	.+18     	; 0x105e <__floatsisf+0x12>

0000104c <__floatsisf>:
    104c:	97 fb       	bst	r25, 7
    104e:	3e f4       	brtc	.+14     	; 0x105e <__floatsisf+0x12>
    1050:	90 95       	com	r25
    1052:	80 95       	com	r24
    1054:	70 95       	com	r23
    1056:	61 95       	neg	r22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	99 23       	and	r25, r25
    1060:	a9 f0       	breq	.+42     	; 0x108c <__floatsisf+0x40>
    1062:	f9 2f       	mov	r31, r25
    1064:	96 e9       	ldi	r25, 0x96	; 150
    1066:	bb 27       	eor	r27, r27
    1068:	93 95       	inc	r25
    106a:	f6 95       	lsr	r31
    106c:	87 95       	ror	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f1 11       	cpse	r31, r1
    1076:	f8 cf       	rjmp	.-16     	; 0x1068 <__floatsisf+0x1c>
    1078:	fa f4       	brpl	.+62     	; 0x10b8 <__floatsisf+0x6c>
    107a:	bb 0f       	add	r27, r27
    107c:	11 f4       	brne	.+4      	; 0x1082 <__floatsisf+0x36>
    107e:	60 ff       	sbrs	r22, 0
    1080:	1b c0       	rjmp	.+54     	; 0x10b8 <__floatsisf+0x6c>
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <__floatsisf+0x6c>
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <__floatsisf+0x48>
    1090:	96 e9       	ldi	r25, 0x96	; 150
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <__floatsisf+0x6a>
    1094:	77 23       	and	r23, r23
    1096:	21 f0       	breq	.+8      	; 0x10a0 <__floatsisf+0x54>
    1098:	9e e8       	ldi	r25, 0x8E	; 142
    109a:	87 2f       	mov	r24, r23
    109c:	76 2f       	mov	r23, r22
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <__floatsisf+0x5e>
    10a0:	66 23       	and	r22, r22
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <__floatsisf+0x74>
    10a4:	96 e8       	ldi	r25, 0x86	; 134
    10a6:	86 2f       	mov	r24, r22
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	2a f0       	brmi	.+10     	; 0x10b8 <__floatsisf+0x6c>
    10ae:	9a 95       	dec	r25
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	da f7       	brpl	.-10     	; 0x10ae <__floatsisf+0x62>
    10b8:	88 0f       	add	r24, r24
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__mulsf3>:
    10c2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__mulsf3x>
    10c6:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_round>
    10ca:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fp_pscA>
    10ce:	38 f0       	brcs	.+14     	; 0x10de <__mulsf3+0x1c>
    10d0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fp_pscB>
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__mulsf3+0x1c>
    10d6:	95 23       	and	r25, r21
    10d8:	11 f0       	breq	.+4      	; 0x10de <__mulsf3+0x1c>
    10da:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_inf>
    10de:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_nan>
    10e2:	11 24       	eor	r1, r1
    10e4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_szero>

000010e8 <__mulsf3x>:
    10e8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_split3>
    10ec:	70 f3       	brcs	.-36     	; 0x10ca <__mulsf3+0x8>

000010ee <__mulsf3_pse>:
    10ee:	95 9f       	mul	r25, r21
    10f0:	c1 f3       	breq	.-16     	; 0x10e2 <__mulsf3+0x20>
    10f2:	95 0f       	add	r25, r21
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	55 1f       	adc	r21, r21
    10f8:	62 9f       	mul	r22, r18
    10fa:	f0 01       	movw	r30, r0
    10fc:	72 9f       	mul	r23, r18
    10fe:	bb 27       	eor	r27, r27
    1100:	f0 0d       	add	r31, r0
    1102:	b1 1d       	adc	r27, r1
    1104:	63 9f       	mul	r22, r19
    1106:	aa 27       	eor	r26, r26
    1108:	f0 0d       	add	r31, r0
    110a:	b1 1d       	adc	r27, r1
    110c:	aa 1f       	adc	r26, r26
    110e:	64 9f       	mul	r22, r20
    1110:	66 27       	eor	r22, r22
    1112:	b0 0d       	add	r27, r0
    1114:	a1 1d       	adc	r26, r1
    1116:	66 1f       	adc	r22, r22
    1118:	82 9f       	mul	r24, r18
    111a:	22 27       	eor	r18, r18
    111c:	b0 0d       	add	r27, r0
    111e:	a1 1d       	adc	r26, r1
    1120:	62 1f       	adc	r22, r18
    1122:	73 9f       	mul	r23, r19
    1124:	b0 0d       	add	r27, r0
    1126:	a1 1d       	adc	r26, r1
    1128:	62 1f       	adc	r22, r18
    112a:	83 9f       	mul	r24, r19
    112c:	a0 0d       	add	r26, r0
    112e:	61 1d       	adc	r22, r1
    1130:	22 1f       	adc	r18, r18
    1132:	74 9f       	mul	r23, r20
    1134:	33 27       	eor	r19, r19
    1136:	a0 0d       	add	r26, r0
    1138:	61 1d       	adc	r22, r1
    113a:	23 1f       	adc	r18, r19
    113c:	84 9f       	mul	r24, r20
    113e:	60 0d       	add	r22, r0
    1140:	21 1d       	adc	r18, r1
    1142:	82 2f       	mov	r24, r18
    1144:	76 2f       	mov	r23, r22
    1146:	6a 2f       	mov	r22, r26
    1148:	11 24       	eor	r1, r1
    114a:	9f 57       	subi	r25, 0x7F	; 127
    114c:	50 40       	sbci	r21, 0x00	; 0
    114e:	9a f0       	brmi	.+38     	; 0x1176 <__mulsf3_pse+0x88>
    1150:	f1 f0       	breq	.+60     	; 0x118e <__mulsf3_pse+0xa0>
    1152:	88 23       	and	r24, r24
    1154:	4a f0       	brmi	.+18     	; 0x1168 <__mulsf3_pse+0x7a>
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	bb 1f       	adc	r27, r27
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	50 40       	sbci	r21, 0x00	; 0
    1166:	a9 f7       	brne	.-22     	; 0x1152 <__mulsf3_pse+0x64>
    1168:	9e 3f       	cpi	r25, 0xFE	; 254
    116a:	51 05       	cpc	r21, r1
    116c:	80 f0       	brcs	.+32     	; 0x118e <__mulsf3_pse+0xa0>
    116e:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_inf>
    1172:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_szero>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	e4 f3       	brlt	.-8      	; 0x1172 <__mulsf3_pse+0x84>
    117a:	98 3e       	cpi	r25, 0xE8	; 232
    117c:	d4 f3       	brlt	.-12     	; 0x1172 <__mulsf3_pse+0x84>
    117e:	86 95       	lsr	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	b7 95       	ror	r27
    1186:	f7 95       	ror	r31
    1188:	e7 95       	ror	r30
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	c1 f7       	brne	.-16     	; 0x117e <__mulsf3_pse+0x90>
    118e:	fe 2b       	or	r31, r30
    1190:	88 0f       	add	r24, r24
    1192:	91 1d       	adc	r25, r1
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__ctype_isfalse>:
    119c:	99 27       	eor	r25, r25
    119e:	88 27       	eor	r24, r24

000011a0 <__ctype_istrue>:
    11a0:	08 95       	ret

000011a2 <__fp_inf>:
    11a2:	97 f9       	bld	r25, 7
    11a4:	9f 67       	ori	r25, 0x7F	; 127
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	08 95       	ret

000011ae <__fp_nan>:
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	80 ec       	ldi	r24, 0xC0	; 192
    11b2:	08 95       	ret

000011b4 <__fp_pscA>:
    11b4:	00 24       	eor	r0, r0
    11b6:	0a 94       	dec	r0
    11b8:	16 16       	cp	r1, r22
    11ba:	17 06       	cpc	r1, r23
    11bc:	18 06       	cpc	r1, r24
    11be:	09 06       	cpc	r0, r25
    11c0:	08 95       	ret

000011c2 <__fp_pscB>:
    11c2:	00 24       	eor	r0, r0
    11c4:	0a 94       	dec	r0
    11c6:	12 16       	cp	r1, r18
    11c8:	13 06       	cpc	r1, r19
    11ca:	14 06       	cpc	r1, r20
    11cc:	05 06       	cpc	r0, r21
    11ce:	08 95       	ret

000011d0 <__fp_round>:
    11d0:	09 2e       	mov	r0, r25
    11d2:	03 94       	inc	r0
    11d4:	00 0c       	add	r0, r0
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__fp_round+0xc>
    11d8:	88 23       	and	r24, r24
    11da:	52 f0       	brmi	.+20     	; 0x11f0 <__fp_round+0x20>
    11dc:	bb 0f       	add	r27, r27
    11de:	40 f4       	brcc	.+16     	; 0x11f0 <__fp_round+0x20>
    11e0:	bf 2b       	or	r27, r31
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <__fp_round+0x18>
    11e4:	60 ff       	sbrs	r22, 0
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <__fp_round+0x20>
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	08 95       	ret

000011f2 <__fp_split3>:
    11f2:	57 fd       	sbrc	r21, 7
    11f4:	90 58       	subi	r25, 0x80	; 128
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	59 f0       	breq	.+22     	; 0x1212 <__fp_splitA+0x10>
    11fc:	5f 3f       	cpi	r21, 0xFF	; 255
    11fe:	71 f0       	breq	.+28     	; 0x121c <__fp_splitA+0x1a>
    1200:	47 95       	ror	r20

00001202 <__fp_splitA>:
    1202:	88 0f       	add	r24, r24
    1204:	97 fb       	bst	r25, 7
    1206:	99 1f       	adc	r25, r25
    1208:	61 f0       	breq	.+24     	; 0x1222 <__fp_splitA+0x20>
    120a:	9f 3f       	cpi	r25, 0xFF	; 255
    120c:	79 f0       	breq	.+30     	; 0x122c <__fp_splitA+0x2a>
    120e:	87 95       	ror	r24
    1210:	08 95       	ret
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	14 06       	cpc	r1, r20
    1218:	55 1f       	adc	r21, r21
    121a:	f2 cf       	rjmp	.-28     	; 0x1200 <__fp_split3+0xe>
    121c:	46 95       	lsr	r20
    121e:	f1 df       	rcall	.-30     	; 0x1202 <__fp_splitA>
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <__fp_splitA+0x30>
    1222:	16 16       	cp	r1, r22
    1224:	17 06       	cpc	r1, r23
    1226:	18 06       	cpc	r1, r24
    1228:	99 1f       	adc	r25, r25
    122a:	f1 cf       	rjmp	.-30     	; 0x120e <__fp_splitA+0xc>
    122c:	86 95       	lsr	r24
    122e:	71 05       	cpc	r23, r1
    1230:	61 05       	cpc	r22, r1
    1232:	08 94       	sec
    1234:	08 95       	ret

00001236 <__fp_zero>:
    1236:	e8 94       	clt

00001238 <__fp_szero>:
    1238:	bb 27       	eor	r27, r27
    123a:	66 27       	eor	r22, r22
    123c:	77 27       	eor	r23, r23
    123e:	cb 01       	movw	r24, r22
    1240:	97 f9       	bld	r25, 7
    1242:	08 95       	ret

00001244 <__muluhisi3>:
    1244:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__umulhisi3>
    1248:	a5 9f       	mul	r26, r21
    124a:	90 0d       	add	r25, r0
    124c:	b4 9f       	mul	r27, r20
    124e:	90 0d       	add	r25, r0
    1250:	a4 9f       	mul	r26, r20
    1252:	80 0d       	add	r24, r0
    1254:	91 1d       	adc	r25, r1
    1256:	11 24       	eor	r1, r1
    1258:	08 95       	ret

0000125a <__prologue_saves__>:
    125a:	2f 92       	push	r2
    125c:	3f 92       	push	r3
    125e:	4f 92       	push	r4
    1260:	5f 92       	push	r5
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	ca 1b       	sub	r28, r26
    1284:	db 0b       	sbc	r29, r27
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	09 94       	ijmp

00001292 <__epilogue_restores__>:
    1292:	2a 88       	ldd	r2, Y+18	; 0x12
    1294:	39 88       	ldd	r3, Y+17	; 0x11
    1296:	48 88       	ldd	r4, Y+16	; 0x10
    1298:	5f 84       	ldd	r5, Y+15	; 0x0f
    129a:	6e 84       	ldd	r6, Y+14	; 0x0e
    129c:	7d 84       	ldd	r7, Y+13	; 0x0d
    129e:	8c 84       	ldd	r8, Y+12	; 0x0c
    12a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12a4:	b9 84       	ldd	r11, Y+9	; 0x09
    12a6:	c8 84       	ldd	r12, Y+8	; 0x08
    12a8:	df 80       	ldd	r13, Y+7	; 0x07
    12aa:	ee 80       	ldd	r14, Y+6	; 0x06
    12ac:	fd 80       	ldd	r15, Y+5	; 0x05
    12ae:	0c 81       	ldd	r16, Y+4	; 0x04
    12b0:	1b 81       	ldd	r17, Y+3	; 0x03
    12b2:	aa 81       	ldd	r26, Y+2	; 0x02
    12b4:	b9 81       	ldd	r27, Y+1	; 0x01
    12b6:	ce 0f       	add	r28, r30
    12b8:	d1 1d       	adc	r29, r1
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	ed 01       	movw	r28, r26
    12c6:	08 95       	ret

000012c8 <__umulhisi3>:
    12c8:	a2 9f       	mul	r26, r18
    12ca:	b0 01       	movw	r22, r0
    12cc:	b3 9f       	mul	r27, r19
    12ce:	c0 01       	movw	r24, r0
    12d0:	a3 9f       	mul	r26, r19
    12d2:	70 0d       	add	r23, r0
    12d4:	81 1d       	adc	r24, r1
    12d6:	11 24       	eor	r1, r1
    12d8:	91 1d       	adc	r25, r1
    12da:	b2 9f       	mul	r27, r18
    12dc:	70 0d       	add	r23, r0
    12de:	81 1d       	adc	r24, r1
    12e0:	11 24       	eor	r1, r1
    12e2:	91 1d       	adc	r25, r1
    12e4:	08 95       	ret

000012e6 <_exit>:
    12e6:	f8 94       	cli

000012e8 <__stop_program>:
    12e8:	ff cf       	rjmp	.-2      	; 0x12e8 <__stop_program>
